---
# https://github.com/golangci/golangci-lint/blob/master/.golangci.reference.yml
# https://golangci-lint.run/jsonschema/golangci.jsonschema.json

# Defines the configuration version.
# The only possible value is "2".
version: "2"

linters:
  # Default set of linters.
  # The value can be:
  # - `standard`: https://golangci-lint.run/docs/linters/#enabled-by-default
  # - `all`: enables all linters by default.
  # - `none`: disables all linters by default.
  # - `fast`: enables only linters considered as "fast" (`golangci-lint help linters --json | jq '[ .[] | select(.fast==true) ] | map(.name)'`).
  # Default: standard
  default: none

  # Enable specific linter.
  enable:
    - arangolint
    # - asasalint
    - asciicheck
    # - bidichk
    - bodyclose
    - canonicalheader
    - containedctx
    - contextcheck
    - copyloopvar
    # - cyclop
    - decorder
    # - depguard
    - dogsled
    - dupl
    - dupword
    - durationcheck
    - embeddedstructfieldcheck
    - err113
    - errcheck
    - errchkjson
    - errname
    - errorlint
    - exhaustive
    # - exhaustruct
    - exptostd
    - fatcontext
    # - forbidigo
    - forcetypeassert
    - funcorder
    - funlen
    # - ginkgolinter
    - gocheckcompilerdirectives
    # - gochecknoglobals
    - gochecknoinits
    - gochecksumtype
    - gocognit
    - goconst
    - gocritic
    # - gocyclo
    # - godot
    - godox
    # - goheader
    # - gomoddirectives
    # - gomodguard
    - goprintffuncname
    - gosec
    # - gosmopolitan
    - govet
    # - grouper
    - iface
    - importas
    - inamedparam
    - ineffassign
    - interfacebloat
    - intrange
    # - ireturn
    - lll
    # - loggercheck
    - maintidx
    - makezero
    - mirror
    - misspell
    - mnd
    # - musttag
    - nakedret
    - nestif
    - nilerr
    - nilnesserr
    - nilnil
    - nlreturn
    - noctx
    # - noinlineerr
    # - nolintlint
    - nonamedreturns
    - nosprintfhostport
    - paralleltest
    - perfsprint
    # - prealloc
    # - predeclared
    # - promlinter
    - protogetter
    # - reassign
    - recvcheck
    - revive
    # - rowserrcheck
    - sloglint
    - spancheck
    - sqlclosecheck
    - staticcheck
    - tagalign
    - tagliatelle
    - testableexamples
    # - testifylint
    # - testpackage
    - thelper
    - tparallel
    - unconvert
    - unparam
    - unused
    - usestdlibvars
    - usetesting
    # - varnamelen
    - wastedassign
    - whitespace
    - wrapcheck
    # - wsl
    - wsl_v5
    - zerologlint

  # All available settings of specific linters.
  settings:
    copyloopvar:
      # Check all assigning the loop variable to another variable.
      # Default: false
      check-alias: true

    decorder:
      # Required order of `type`, `const`, `var` and `func` declarations inside a file.
      # Default: types before constants before variables before functions.
      dec-order:
        - const
        - var
        - type
        - func

      # If true, underscore vars (vars with "_" as the name) will be ignored at all checks.
      # Default: false (underscore vars are not ignored)
      ignore-underscore-vars: false

      # If true, order of declarations is not checked at all.
      # Default: true (disabled)
      disable-dec-order-check: false

      # If true, `init` func can be anywhere in file (does not have to be declared before all other functions).
      # Default: true (disabled)
      disable-init-func-first-check: false

      # If true, multiple global `type`, `const` and `var` declarations are allowed.
      # Default: true (disabled)
      disable-dec-num-check: false

      # If true, type declarations will be ignored for dec num check.
      # Default: false (type statements are not ignored)
      disable-type-dec-num-check: false

      # If true, const declarations will be ignored for dec num check.
      # Default: false (const statements are not ignored)
      disable-const-dec-num-check: false

      # If true, var declarations will be ignored for dec num check.
      # Default: false (var statements are not ignored)
      disable-var-dec-num-check: false

    dogsled:
      # Checks assignments with too many blank identifiers.
      # Default: 2
      max-blank-identifiers: 2

    dupl:
      # Tokens count to trigger issue.
      # Default: 150
      threshold: 150

    dupword:
      # Keywords for detecting duplicate words.
      # If this list is not empty, only the words defined in this list will be detected.
      # Default: []
      keywords:
        - a
        - an
        - and
        - of
        - or
        - the
        - this

      # Keywords used to ignore detection.
      # Default: []
      # ignore:
      #   - "0C0C"

    embeddedstructfieldcheck:
      # Checks that sync.Mutex and sync.RWMutex are not used as embedded fields.
      # Default: false
      forbid-mutex: true

    errcheck:
      # Report about not checking of errors in type assertions: `a := b.(MyStruct)`.
      # Such cases aren't reported by default.
      # Default: false
      check-type-assertions: true

      # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`.
      # Such cases aren't reported by default.
      # Default: false
      check-blank: false

      # To disable the errcheck built-in exclude list.
      # See `-excludeonly` option in https://github.com/kisielk/errcheck#excluding-functions for details.
      # Default: false
      disable-default-exclusions: false

      # List of functions to exclude from checking, where each entry is a single function to exclude.
      # See https://github.com/kisielk/errcheck#excluding-functions for details.
      exclude-functions:
        - io/ioutil.ReadFile
        - io.Copy(*bytes.Buffer)
        - io.Copy(os.Stdout)

      # Display function signature instead of selector.
      # Default: false
      verbose: true

    errchkjson:
      # With check-error-free-encoding set to true, errchkjson does warn about errors
      # from json encoding functions that are safe to be ignored,
      # because they are not possible to happen.
      #
      # if check-error-free-encoding is set to true and errcheck linter is enabled,
      # it is recommended to add the following exceptions to prevent from false positives:
      #
      #     linters:
      #       settings:
      #         errcheck:
      #           exclude-functions:
      #             - encoding/json.Marshal
      #             - encoding/json.MarshalIndent
      #
      # Default: false
      check-error-free-encoding: false

      # Issue on struct encoding that doesn't have exported fields.
      # Default: false
      report-no-exported: false

    errorlint:
      # Check whether fmt.Errorf uses the %w verb for formatting errors.
      # See the https://github.com/polyfloyd/go-errorlint for caveats.
      # Default: true
      errorf: true

      # Permit more than 1 %w verb, valid per Go 1.20 (requires `errorf: true`).
      # Default: true
      errorf-multi: true

      # Check for plain type assertions and type switches.
      # Default: true
      asserts: true

      # Check for plain error comparisons.
      # Default: true
      comparison: true

      # Allowed errors.
      # Default: []
      # allowed-errors:
      #   - err: "io.EOF"
      #     fun: "example.com/pkg.Read"

      # Allowed error "wildcards".
      # Default: []
      # allowed-errors-wildcard:
      #   - err: "example.com/pkg.ErrMagic"
      #     fun: "example.com/pkg.Magic"

    exhaustive:
      # Program elements to check for exhaustiveness.
      # Default: [ switch ]
      check:
        - switch
        - map

      # Presence of "default" case in switch statements satisfies exhaustiveness,
      # even if all enum members are not listed.
      # Default: false
      default-signifies-exhaustive: true

      # Enum members matching the supplied regex do not have to be listed in
      # switch statements to satisfy exhaustiveness.
      # Default: ""
      ignore-enum-members: "Example.+"

      # Enum types matching the supplied regex do not have to be listed in
      # switch statements to satisfy exhaustiveness.
      # Default: ""
      ignore-enum-types: "Example.+"

      # Consider enums only in package scopes, not in inner scopes.
      # Default: false
      package-scope-only: false

      # Only run exhaustive check on switches with "//exhaustive:enforce" comment.
      # Default: false
      explicit-exhaustive-switch: false

      # Only run exhaustive check on map literals with "//exhaustive:enforce" comment.
      # Default: false
      explicit-exhaustive-map: false

      # Switch statement requires default case even if exhaustive.
      # Default: false
      default-case-required: true

    # exhaustruct:
    #   # List of regular expressions to match struct packages and their names.
    #   # Regular expressions must match complete canonical struct package/name/structname.
    #   # If this list is empty, all structs are tested.
    #   # Default: []
    #   # include:
    #   #   - '.+\.Test'
    #   #   - 'example\.com/package\.ExampleStruct[\d]{1,2}'

    #   # List of regular expressions to exclude struct packages and their names from checks.
    #   # Regular expressions must match complete canonical struct package/name/structname.
    #   # Default: []
    #   exclude:
    #     - '.+/cobra\.Command$'

    fatcontext:
      # Check for potential fat contexts in struct pointers.
      # May generate false positives.
      # Default: false
      check-struct-pointers: false

    funcorder:
      # Checks that constructors are placed after the structure declaration.
      # Default: true
      constructor: true

      # Checks if the exported methods of a structure are placed before the non-exported ones.
      # Default: true
      struct-method: true

      # Checks if the constructors and/or structure methods are sorted alphabetically.
      # Default: false
      alphabetical: false

    funlen:
      # Checks the number of lines in a function.
      # If lower than 0, disable the check.
      # Default: 60
      lines: -1

      # Checks the number of statements in a function.
      # If lower than 0, disable the check.
      # Default: 40
      statements: -1

      # Ignore comments when counting lines.
      # Default: true
      ignore-comments: true

    gochecksumtype:
      # Presence of `default` case in switch statements satisfies exhaustiveness, if all members are not listed.
      # Default: true
      default-signifies-exhaustive: true

      # Include shared interfaces in the exhaustiveness check.
      # Default: false
      include-shared-interfaces: false

    gocognit:
      # Minimal code complexity to report.
      # Default: 30 (but we recommend 10-20)
      min-complexity: 20

    goconst:
      # Minimal length of string constant.
      # Default: 3
      min-len: 80

      # Minimum occurrences of constant string count to trigger issue.
      # Default: 3
      min-occurrences: 3

      # Look for existing constants matching the values.
      # Default: true
      match-constant: true

      # Search also for duplicated numbers.
      # Default: false
      numbers: false

      # Minimum value, only works with `goconst.numbers`.
      # Default: 3
      # min: 2

      # Maximum value, only works with `goconst.numbers`.
      # Default: 3
      # max: 2

      # Ignore when constant is not used as function argument.
      # Default: true
      ignore-calls: true

      # Exclude strings matching the given regular expression.
      # Default: ""
      ignore-string-values:
        - "foo.+"

      # Detects constants with identical values.
      # Default: false
      find-duplicates: false

      # Evaluates of constant expressions like Prefix + "suffix".
      # Default: false
      eval-const-expressions: true

    gocritic:
      # Disable all checks.
      # Default: false
      # disable-all: true

      # Which checks should be enabled in addition to default checks; can't be combined with 'disabled-checks'.
      # By default, list of stable checks is used (https://go-critic.com/overview#checks-overview):
      #   appendAssign, argOrder, assignOp, badCall, badCond, captLocal, caseOrder, codegenComment, commentFormatting,
      #   defaultCaseOrder, deprecatedComment, dupArg, dupBranchBody, dupCase, dupSubExpr, elseif, exitAfterDefer,
      #   flagDeref, flagName, ifElseChain, mapKey, newDeref, offBy1, regexpMust, singleCaseSwitch, sloppyLen,
      #   sloppyTypeAssert, switchTrue, typeSwitchVar, underef, unlambda, unslice, valSwap, wrapperFunc
      # To see which checks are enabled run `GL_DEBUG=gocritic golangci-lint run --enable=gocritic`.
      # enabled-checks:
      # # Detects suspicious append result assignments.
      # # https://go-critic.com/overview.html#appendassign
      # - appendAssign
      # # Detects `append` chains to the same slice that can be done in a single `append` call.
      # # https://go-critic.com/overview.html#appendcombine
      # - appendCombine
      # # Detects suspicious arguments order.
      # # https://go-critic.com/overview.html#argorder
      # - argOrder
      # # Detects assignments that can be simplified by using assignment operators.
      # # https://go-critic.com/overview.html#assignop
      # - assignOp
      # # Detects suspicious function calls.
      # # https://go-critic.com/overview.html#badcall
      # - badCall
      # # Detects suspicious condition expressions.
      # # https://go-critic.com/overview.html#badcond
      # - badCond
      # # Detects suspicious mutex lock/unlock operations.
      # # https://go-critic.com/overview.html#badlock
      # - badLock
      # # Detects suspicious regexp patterns.
      # # https://go-critic.com/overview.html#badregexp
      # - badRegexp
      # # Detects bad usage of sort package.
      # # https://go-critic.com/overview.html#badsorting
      # - badSorting
      # # Detects bad usage of sync.OnceFunc.
      # # https://go-critic.com/overview.html#badsynconcefunc
      # - badSyncOnceFunc
      # # Detects bool expressions that can be simplified.
      # # https://go-critic.com/overview.html#boolexprsimplify
      # - boolExprSimplify
      # # Detects when predeclared identifiers are shadowed in assignments.
      # # https://go-critic.com/overview.html#builtinshadow
      # - builtinShadow
      # # Detects top-level declarations that shadow the predeclared identifiers.
      # # https://go-critic.com/overview.html#builtinshadowdecl
      # - builtinShadowDecl
      # # Detects capitalized names for local variables.
      # # https://go-critic.com/overview.html#captlocal
      # - captLocal
      # # Detects erroneous case order inside switch statements.
      # # https://go-critic.com/overview.html#caseorder
      # - caseOrder
      # # Detects malformed 'code generated' file comments.
      # # https://go-critic.com/overview.html#codegencomment
      # - codegenComment
      # # Detects comments with non-idiomatic formatting.
      # # https://go-critic.com/overview.html#commentformatting
      # - commentFormatting
      # # Detects commented-out code inside function bodies.
      # # https://go-critic.com/overview.html#commentedoutcode
      # - commentedOutCode
      # # Detects commented-out imports.
      # # https://go-critic.com/overview.html#commentedoutimport
      # - commentedOutImport
      # # Detects when default case in switch isn't on 1st or last position.
      # # https://go-critic.com/overview.html#defaultcaseorder
      # - defaultCaseOrder
      # # Detects loops inside functions that use defer.
      # # https://go-critic.com/overview.html#deferinloop
      # - deferInLoop
      # # Detects deferred function literals that can be simplified.
      # # https://go-critic.com/overview.html#deferunlambda
      # - deferUnlambda
      # # Detects malformed 'deprecated' doc-comments.
      # # https://go-critic.com/overview.html#deprecatedcomment
      # - deprecatedComment
      # # Detects comments that silence go lint complaints about doc-comment.
      # # https://go-critic.com/overview.html#docstub
      # - docStub
      # # Detects suspicious duplicated arguments.
      # # https://go-critic.com/overview.html#duparg
      # - dupArg
      # # Detects duplicated branch bodies inside conditional statements.
      # # https://go-critic.com/overview.html#dupbranchbody
      # - dupBranchBody
      # # Detects duplicated case clauses inside switch or select statements.
      # # https://go-critic.com/overview.html#dupcase
      # - dupCase
      # # Detects multiple imports of the same package under different aliases.
      # # https://go-critic.com/overview.html#dupimport
      # - dupImport
      # # Detects suspicious duplicated sub-expressions.
      # # https://go-critic.com/overview.html#dupsubexpr
      # - dupSubExpr
      # # Detects suspicious formatting strings usage.
      # # https://go-critic.com/overview.html#dynamicfmtstring
      # - dynamicFmtString
      # # Detects else with nested if statement that can be replaced with else-if.
      # # https://go-critic.com/overview.html#elseif
      # - elseif
      # # Detects suspicious empty declarations blocks.
      # # https://go-critic.com/overview.html#emptydecl
      # - emptyDecl
      # # Detects fallthrough that can be avoided by using multi case values.
      # # https://go-critic.com/overview.html#emptyfallthrough
      # - emptyFallthrough
      # # Detects empty string checks that can be written more idiomatically.
      # # https://go-critic.com/overview.html#emptystringtest
      # - emptyStringTest
      # # Detects unoptimal strings/bytes case-insensitive comparison.
      # # https://go-critic.com/overview.html#equalfold
      # - equalFold
      # # Detects unwanted dependencies on the evaluation order.
      # # https://go-critic.com/overview.html#evalorder
      # - evalOrder
      # # Detects calls to exit/fatal inside functions that use defer.
      # # https://go-critic.com/overview.html#exitafterdefer
      # - exitAfterDefer
      # # Detects exposed methods from sync.Mutex and sync.RWMutex.
      # # https://go-critic.com/overview.html#exposedsyncmutex
      # - exposedSyncMutex
      # # Detects suspicious reassignment of error from another package.
      # # https://go-critic.com/overview.html#externalerrorreassign
      # - externalErrorReassign
      # # Detects problems in filepath.Join() function calls.
      # # https://go-critic.com/overview.html#filepathjoin
      # - filepathJoin
      # # Detects immediate dereferencing of `flag` package pointers.
      # # https://go-critic.com/overview.html#flagderef
      # - flagDeref
      # # Detects suspicious flag names.
      # # https://go-critic.com/overview.html#flagname
      # - flagName
      # # Detects hex literals that have mixed case letter digits.
      # # https://go-critic.com/overview.html#hexliteral
      # - hexLiteral
      # # Detects nil usages in http.NewRequest calls, suggesting http.NoBody as an alternative.
      # # https://go-critic.com/overview.html#httpnobody
      # - httpNoBody
      # # Detects params that incur excessive amount of copying.
      # # https://go-critic.com/overview.html#hugeparam
      # - hugeParam
      # # Detects repeated if-else statements and suggests to replace them with switch statement.
      # # https://go-critic.com/overview.html#ifelsechain
      # - ifElseChain
      # # Detects when imported package names shadowed in the assignments.
      # # https://go-critic.com/overview.html#importshadow
      # - importShadow
      # # Detects strings.Index calls that may cause unwanted allocs.
      # # https://go-critic.com/overview.html#indexalloc
      # - indexAlloc
      # # Detects non-assignment statements inside if/switch init clause.
      # # https://go-critic.com/overview.html#initclause
      # - initClause
      # # Detects suspicious map literal keys.
      # # https://go-critic.com/overview.html#mapkey
      # - mapKey
      # # Detects method expression call that can be replaced with a method call.
      # # https://go-critic.com/overview.html#methodexprcall
      # - methodExprCall
      # # Finds where nesting level could be reduced.
      # # https://go-critic.com/overview.html#nestingreduce
      # - nestingReduce
      # # Detects immediate dereferencing of `new` expressions.
      # # https://go-critic.com/overview.html#newderef
      # - newDeref
      # # Detects return statements those results evaluate to nil.
      # # https://go-critic.com/overview.html#nilvalreturn
      # - nilValReturn
      # # Detects old-style octal literals.
      # # https://go-critic.com/overview.html#octalliteral
      # - octalLiteral
      # # Detects various off-by-one kind of errors.
      # # https://go-critic.com/overview.html#offby1
      # - offBy1
      # # Detects if function parameters could be combined by type and suggest the way to do it.
      # # https://go-critic.com/overview.html#paramtypecombine
      # - paramTypeCombine
      # # Detects expressions like []rune(s)[0] that may cause unwanted rune slice allocation.
      # # https://go-critic.com/overview.html#preferdecoderune
      # - preferDecodeRune
      # # Detects concatenation with os.PathSeparator which can be replaced with filepath.Join.
      # # https://go-critic.com/overview.html#preferfilepathjoin
      # - preferFilepathJoin
      # # Detects fmt.Sprint(f/ln) calls which can be replaced with fmt.Fprint(f/ln).
      # # https://go-critic.com/overview.html#preferfprint
      # - preferFprint
      # # Detects w.Write or io.WriteString calls which can be replaced with w.WriteString.
      # # https://go-critic.com/overview.html#preferstringwriter
      # - preferStringWriter
      # # Detects WriteRune calls with rune literal argument that is single byte and reports to use WriteByte instead.
      # # https://go-critic.com/overview.html#preferwritebyte
      # - preferWriteByte
      # # Detects input and output parameters that have a type of pointer to referential type.
      # # https://go-critic.com/overview.html#ptrtorefparam
      # - ptrToRefParam
      # # Detects append all its data while range it.
      # # https://go-critic.com/overview.html#rangeappendall
      # - rangeAppendAll
      # # Detects expensive copies of `for` loop range expressions.
      # # https://go-critic.com/overview.html#rangeexprcopy
      # - rangeExprCopy
      # # Detects loops that copy big objects during each iteration.
      # # https://go-critic.com/overview.html#rangevalcopy
      # - rangeValCopy
      # # Detects redundant fmt.Sprint calls.
      # # https://go-critic.com/overview.html#redundantsprint
      # - redundantSprint
      # # Detects `regexp.Compile*` that can be replaced with `regexp.MustCompile*`.
      # # https://go-critic.com/overview.html#regexpmust
      # - regexpMust
      # # Detects suspicious regexp patterns.
      # # https://go-critic.com/overview.html#regexppattern
      # - regexpPattern
      # # Detects regexp patterns that can be simplified.
      # # https://go-critic.com/overview.html#regexpsimplify
      # - regexpSimplify
      # # Detects suspicious http.Error call without following return.
      # # https://go-critic.com/overview.html#returnafterhttperror
      # - returnAfterHttpError
      # # Runs user-defined rules using ruleguard linter.
      # # https://go-critic.com/overview.html#ruleguard
      # - ruleguard
      # # Detects switch statements that could be better written as if statement.
      # # https://go-critic.com/overview.html#singlecaseswitch
      # - singleCaseSwitch
      # # Detects slice clear loops, suggests an idiom that is recognized by the Go compiler.
      # # https://go-critic.com/overview.html#sliceclear
      # - sliceClear
      # # Detects usage of `len` when result is obvious or doesn't make sense.
      # # https://go-critic.com/overview.html#sloppylen
      # - sloppyLen
      # # Detects suspicious/confusing re-assignments.
      # # https://go-critic.com/overview.html#sloppyreassign
      # - sloppyReassign
      # # Detects redundant type assertions.
      # # https://go-critic.com/overview.html#sloppytypeassert
      # - sloppyTypeAssert
      # # Detects suspicious sort.Slice calls.
      # # https://go-critic.com/overview.html#sortslice
      # - sortSlice
      # # Detects "%s" formatting directives that can be replaced with %q.
      # # https://go-critic.com/overview.html#sprintfquotedstring
      # - sprintfQuotedString
      # # Detects issue in Query() and Exec() calls.
      # # https://go-critic.com/overview.html#sqlquery
      # - sqlQuery
      # # Detects string concat operations that can be simplified.
      # # https://go-critic.com/overview.html#stringconcatsimplify
      # - stringConcatSimplify
      # # Detects redundant conversions between string and []byte.
      # # https://go-critic.com/overview.html#stringxbytes
      # - stringXbytes
      # # Detects strings.Compare usage.
      # # https://go-critic.com/overview.html#stringscompare
      # - stringsCompare
      # # Detects switch-over-bool statements that use explicit `true` tag value.
      # # https://go-critic.com/overview.html#switchtrue
      # - switchTrue
      # # Detects sync.Map load+delete operations that can be replaced with LoadAndDelete.
      # # https://go-critic.com/overview.html#syncmaploadanddelete
      # - syncMapLoadAndDelete
      # # Detects manual conversion to milli- or microseconds.
      # # https://go-critic.com/overview.html#timeexprsimplify
      # - timeExprSimplify
      # # Detects TODO comments without detail/assignee.
      # # https://go-critic.com/overview.html#todocommentwithoutdetail
      # - todoCommentWithoutDetail
      # # Detects function with too many results.
      # # https://go-critic.com/overview.html#toomanyresultschecker
      # - tooManyResultsChecker
      # # Detects potential truncation issues when comparing ints of different sizes.
      # # https://go-critic.com/overview.html#truncatecmp
      # - truncateCmp
      # # Detects repeated type assertions and suggests to replace them with type switch statement.
      # # https://go-critic.com/overview.html#typeassertchain
      # - typeAssertChain
      # # Detects method declarations preceding the type definition itself.
      # # https://go-critic.com/overview.html#typedeffirst
      # - typeDefFirst
      # # Detects type switches that can benefit from type guard clause with variable.
      # # https://go-critic.com/overview.html#typeswitchvar
      # - typeSwitchVar
      # # Detects unneeded parenthesis inside type expressions and suggests to remove them.
      # # https://go-critic.com/overview.html#typeunparen
      # - typeUnparen
      # # Detects unchecked errors in if statements.
      # # https://go-critic.com/overview.html#uncheckedinlineerr
      # - uncheckedInlineErr
      # # Detects dereference expressions that can be omitted.
      # # https://go-critic.com/overview.html#underef
      # - underef
      # # Detects redundant statement labels.
      # # https://go-critic.com/overview.html#unlabelstmt
      # - unlabelStmt
      # # Detects function literals that can be simplified.
      # # https://go-critic.com/overview.html#unlambda
      # - unlambda
      # # Detects unnamed results that may benefit from names.
      # # https://go-critic.com/overview.html#unnamedresult
      # - unnamedResult
      # # Detects unnecessary braced statement blocks.
      # # https://go-critic.com/overview.html#unnecessaryblock
      # - unnecessaryBlock
      # # Detects redundantly deferred calls.
      # # https://go-critic.com/overview.html#unnecessarydefer
      # - unnecessaryDefer
      # # Detects slice expressions that can be simplified to sliced expression itself.
      # # https://go-critic.com/overview.html#unslice
      # - unslice
      # # Detects value swapping code that are not using parallel assignment.
      # # https://go-critic.com/overview.html#valswap
      # - valSwap
      # # Detects conditions that are unsafe due to not being exhaustive.
      # # https://go-critic.com/overview.html#weakcond
      # - weakCond
      # # Ensures that `//nolint` comments include an explanation.
      # # https://go-critic.com/overview.html#whynolint
      # - whyNoLint
      # # Detects function calls that can be replaced with convenience wrappers.
      # # https://go-critic.com/overview.html#wrapperfunc
      # - wrapperFunc
      # # Detects Yoda style expressions and suggests to replace them.
      # # https://go-critic.com/overview.html#yodastyleexpr
      # - yodaStyleExpr

      # Enable all checks.
      # Default: false
      enable-all: false

      # Which checks should be disabled; can't be combined with 'enabled-checks'.
      # Default: []
      # disabled-checks:

      # Enable multiple checks by tags in addition to default checks.
      # Run `GL_DEBUG=gocritic golangci-lint run --enable=gocritic` to see all tags and checks.
      # See https://github.com/go-critic/go-critic#usage -> section "Tags".
      # Default: []
      enabled-tags:
        - diagnostic
        - experimental
        - opinionated
        - performance
        - style

      # Settings passed to gocritic.
      # The settings key is the name of a supported gocritic checker.
      # The list of supported checkers can be found at https://go-critic.com/overview.
      settings:
        # Must be valid enabled check name.
        captLocal:
          # Whether to restrict checker to params only.
          # Default: true
          paramsOnly: true

        commentedOutCode:
          # Min length of the comment that triggers a warning.
          # Default: 15
          minLength: 50

        elseif:
          # Whether to skip balanced if-else pairs.
          # Default: true
          skipBalanced: true

        hugeParam:
          # Size in bytes that makes the warning trigger.
          # Default: 80
          sizeThreshold: 80

        ifElseChain:
          # Min number of if-else blocks that makes the warning trigger.
          # Default: 2
          minThreshold: 10

        nestingReduce:
          # Min number of statements inside a branch to trigger a warning.
          # Default: 5
          bodyWidth: 5

        rangeExprCopy:
          # Size in bytes that makes the warning trigger.
          # Default: 512
          sizeThreshold: 512
          # Whether to check test functions
          # Default: true
          skipTestFuncs: true

        rangeValCopy:
          # Size in bytes that makes the warning trigger.
          # Default: 128
          sizeThreshold: 128
          # Whether to check test functions.
          # Default: true
          skipTestFuncs: true

        # ruleguard:
        # Enable debug to identify which 'Where' condition was rejected.
        # The value of the parameter is the name of a function in a ruleguard file.
        #
        # When a rule is evaluated:
        # If:
        #   The Match() clause is accepted; and
        #   One of the conditions in the Where() clause is rejected,
        # Then:
        #   ruleguard prints the specific Where() condition that was rejected.
        #
        # The option is passed to the ruleguard 'debug-group' argument.
        # Default: ""
        # debug: ""

        # Determines the behavior when an error occurs while parsing ruleguard files.
        # If flag is not set, log error and skip rule files that contain an error.
        # If flag is set, the value must be a comma-separated list of error conditions.
        # - 'all':    fail on all errors.
        # - 'import': ruleguard rule imports a package that cannot be found.
        # - 'dsl':    gorule file does not comply with the ruleguard DSL.
        # Default: ""
        # failOn: dsl,import

        # Comma-separated list of file paths containing ruleguard rules.
        # By default, if a path is relative, it is relative to the directory where the golangci-lint command is executed.
        # The placeholder '${base-path}' is substituted with a path relative to the mode defined with `run.relative-path-mode`.
        # The placeholder '${config-path}' is substituted with a path relative to the configuration file.
        # Glob patterns such as 'rules-*.go' may be specified.
        # Default: ""
        # rules: "${base-path}/ruleguard/rules-*.go,${base-path}/myrule1.go"

        # Comma-separated list of enabled groups or skip empty to enable everything.
        # Tags can be defined with # character prefix.
        # Default: "<all>"
        # enable: "myGroupName,#myTagName"

        # Comma-separated list of disabled groups or skip empty to enable everything.
        # Tags can be defined with # character prefix.
        # Default: ""
        # disable: "myGroupName,#myTagName"

        tooManyResultsChecker:
          # Maximum number of results.
          # Default: 5
          maxResults: 20

        truncateCmp:
          # Whether to skip int/uint/uintptr types.
          # Default: true
          skipArchDependent: true

        underef:
          # Whether to skip (*x).method() calls where x is a pointer receiver.
          # Default: true
          skipRecvDeref: true

        unnamedResult:
          # Whether to check exported functions.
          # Default: false
          checkExported: false

    godox:
      # Report any comments starting with keywords, this is useful for TODO or FIXME comments that
      # might be left in the code accidentally and should be resolved before merging.
      # Default: ["TODO", "BUG", "FIXME"]
      keywords:
        - BUG
        - FIXME
        - HACK
        - NOTE
        - OPTIMIZE
        - TODO
        - "@TODO"

    gomoddirectives:
      # Allow local `replace` directives.
      # Default: false
      replace-local: false

      # List of allowed `replace` directives.
      # Default: []
      # replace-allow-list:
      #   - launchpad.net/gocheck

      # Allow to not explain why the version has been retracted in the `retract` directives.
      # Default: false
      retract-allow-no-explanation: true

      # Forbid the use of the `exclude` directives.
      # Default: false
      exclude-forbidden: false

      # Forbid the use of the `ignore` directives (>= go1.25).
      # Default: false
      ignore-forbidden: false

      # Forbid the use of the `toolchain` directive.
      # Default: false
      toolchain-forbidden: false

      # Defines a pattern to validate `toolchain` directive.
      # Default: '' (no match)
      # toolchain-pattern: 'go1\.23\.\d+$'

      # Forbid the use of the `tool` directives.
      # Default: false
      tool-forbidden: false

      # Forbid the use of the `godebug` directive.
      # Default: false
      go-debug-forbidden: false

      # Defines a pattern to validate `go` minimum version directive.
      # Default: '' (no match)
      # go-version-pattern: '\d\.\d+(\.0)?'

    gosec:
      # To select a subset of rules to run.
      # Available rules: https://github.com/securego/gosec#available-rules
      # Default: [] - means include all rules
      # includes:
      #   - G101 # Look for hard coded credentials
      #   - G102 # Bind to all interfaces
      #   - G103 # Audit the use of unsafe block
      #   - G104 # Audit errors not checked
      #   - G106 # Audit the use of ssh.InsecureIgnoreHostKey
      #   - G107 # Url provided to HTTP request as taint input
      #   - G108 # Profiling endpoint automatically exposed on /debug/pprof
      #   - G109 # Potential Integer overflow made by strconv.Atoi result conversion to int16/32
      #   - G110 # Potential DoS vulnerability via decompression bomb
      #   - G111 # Potential directory traversal
      #   - G112 # Potential slowloris attack
      #   - G114 # Use of net/http serve function that has no support for setting timeouts
      #   - G115 # Potential integer overflow when converting between integer types
      #   - G201 # SQL query construction using format string
      #   - G202 # SQL query construction using string concatenation
      #   - G203 # Use of unescaped data in HTML templates
      #   - G204 # Audit use of command execution
      #   - G301 # Poor file permissions used when creating a directory
      #   - G302 # Poor file permissions used with chmod
      #   - G303 # Creating tempfile using a predictable path
      #   - G304 # File path provided as taint input
      #   - G305 # File traversal when extracting zip/tar archive
      #   - G306 # Poor file permissions used when writing to a new file
      #   - G307 # Poor file permissions used when creating a file with os.Create
      #   - G401 # Detect the usage of MD5 or SHA1
      #   - G402 # Look for bad TLS connection settings
      #   - G403 # Ensure minimum RSA key length of 2048 bits
      #   - G404 # Insecure random number source (rand)
      #   - G405 # Detect the usage of DES or RC4
      #   - G406 # Detect the usage of MD4 or RIPEMD160
      #   - G501 # Import blocklist: crypto/md5
      #   - G502 # Import blocklist: crypto/des
      #   - G503 # Import blocklist: crypto/rc4
      #   - G504 # Import blocklist: net/http/cgi
      #   - G505 # Import blocklist: crypto/sha1
      #   - G506 # Import blocklist: golang.org/x/crypto/md4
      #   - G507 # Import blocklist: golang.org/x/crypto/ripemd160
      #   - G601 # Implicit memory aliasing of items from a range statement
      #   - G602 # Slice access out of bounds

      # To specify a set of rules to explicitly exclude.
      # Available rules: https://github.com/securego/gosec#available-rules
      # Default: []
      # excludes:
      #   - G101 # Look for hard coded credentials
      #   - G102 # Bind to all interfaces
      #   - G103 # Audit the use of unsafe block
      #   - G104 # Audit errors not checked
      #   - G106 # Audit the use of ssh.InsecureIgnoreHostKey
      #   - G107 # Url provided to HTTP request as taint input
      #   - G108 # Profiling endpoint automatically exposed on /debug/pprof
      #   - G109 # Potential Integer overflow made by strconv.Atoi result conversion to int16/32
      #   - G110 # Potential DoS vulnerability via decompression bomb
      #   - G111 # Potential directory traversal
      #   - G112 # Potential slowloris attack
      #   - G114 # Use of net/http serve function that has no support for setting timeouts
      #   - G115 # Potential integer overflow when converting between integer types
      #   - G201 # SQL query construction using format string
      #   - G202 # SQL query construction using string concatenation
      #   - G203 # Use of unescaped data in HTML templates
      #   - G204 # Audit use of command execution
      #   - G301 # Poor file permissions used when creating a directory
      #   - G302 # Poor file permissions used with chmod
      #   - G303 # Creating tempfile using a predictable path
      #   - G304 # File path provided as taint input
      #   - G305 # File traversal when extracting zip/tar archive
      #   - G306 # Poor file permissions used when writing to a new file
      #   - G307 # Poor file permissions used when creating a file with os.Create
      #   - G401 # Detect the usage of MD5 or SHA1
      #   - G402 # Look for bad TLS connection settings
      #   - G403 # Ensure minimum RSA key length of 2048 bits
      #   - G404 # Insecure random number source (rand)
      #   - G405 # Detect the usage of DES or RC4
      #   - G406 # Detect the usage of MD4 or RIPEMD160
      #   - G501 # Import blocklist: crypto/md5
      #   - G502 # Import blocklist: crypto/des
      #   - G503 # Import blocklist: crypto/rc4
      #   - G504 # Import blocklist: net/http/cgi
      #   - G505 # Import blocklist: crypto/sha1
      #   - G506 # Import blocklist: golang.org/x/crypto/md4
      #   - G507 # Import blocklist: golang.org/x/crypto/ripemd160
      #   - G601 # Implicit memory aliasing of items from a range statement
      #   - G602 # Slice access out of bounds

      # Filter out the issues with a lower severity than the given value.
      # Valid options are: low, medium, high.
      # Default: low
      severity: low

      # Filter out the issues with a lower confidence than the given value.
      # Valid options are: low, medium, high.
      # Default: low
      confidence: medium

      # Concurrency value.
      # Default: the number of logical CPUs usable by the current process.
      # concurrency: 12

      # To specify the configuration of rules.
      config:
        # Globals are applicable to all rules.
        global:
          # If true, ignore #nosec in comments (and an alternative as well).
          # Default: false
          nosec: false

          # Add an alternative comment prefix to #nosec (both will work at the same time).
          # Default: ""
          # "#nosec": "#my-custom-nosec"

          # Define whether nosec issues are counted as finding or not.
          # Default: false
          show-ignored: false

          # Audit mode enables addition checks that for normal code analysis might be too nosy.
          # Default: false
          audit: true
        G101:
          # Regexp pattern for variables and constants to find.
          # Default: "(?i)passwd|pass|password|pwd|secret|token|pw|apiKey|bearer|cred"
          pattern: "(?i)example"

          # If true, complain about all cases (even with low entropy).
          # Default: false
          ignore_entropy: false

          # Maximum allowed entropy of the string.
          # Default: "80.0"
          entropy_threshold: "80.0"

          # Maximum allowed value of entropy/string length.
          # Is taken into account if entropy >= entropy_threshold/2.
          # Default: "3.0"
          per_char_threshold: "3.0"

          # Calculate entropy for first N chars of the string.
          # Default: "16"
          truncate: "16"

        # Additional functions to ignore while checking unhandled errors.
        # Following functions always ignored:
        #   bytes.Buffer:
        #     - Write
        #     - WriteByte
        #     - WriteRune
        #     - WriteString
        #   fmt:
        #     - Print
        #     - Printf
        #     - Println
        #     - Fprint
        #     - Fprintf
        #     - Fprintln
        #   strings.Builder:
        #     - Write
        #     - WriteByte
        #     - WriteRune
        #     - WriteString
        #   io.PipeWriter:
        #     - CloseWithError
        #   hash.Hash:
        #     - Write
        #   os:
        #     - Unsetenv
        # Default: {}
        G104:
          fmt:
            - Fscanf

        G111:
          # Regexp pattern to find potential directory traversal.
          # Default: "http\\.Dir\\(\"\\/\"\\)|http\\.Dir\\('\\/'\\)"
          pattern: "custom\\.Dir\\(\\)"

        # Maximum allowed permissions mode for os.Mkdir and os.MkdirAll.
        # Default: "0750"
        G301: "0750"

        # Maximum allowed permissions mode for os.OpenFile and os.Chmod.
        # Default: "0600"
        G302: "0600"

        # Maximum allowed permissions mode for os.WriteFile and ioutil.WriteFile.
        # Default: "0600"
        G306: "0666"

    govet:
      # Disable all analyzers.
      # Default: false
      disable-all: true
      # Enable analyzers by name.
      # (In addition to default:
      #   appends, asmdecl, assign, atomic, bools, buildtag, cgocall, composites, copylocks, defers, directive, errorsas,
      #   framepointer, httpresponse, ifaceassert, loopclosure, lostcancel, nilfunc, printf, shift, sigchanyzer, slog,
      #   stdmethods, stringintconv, structtag, testinggoroutine, tests, timeformat, unmarshal, unreachable, unsafeptr,
      #   unusedresult
      # ).
      # Run `GL_DEBUG=govet golangci-lint run --enable=govet` to see default, all available analyzers, and enabled analyzers.
      # Default: []
      enable:
        - appends # Check for missing values after append.
        - asmdecl # Report mismatches between assembly files and Go declarations.
        - assign # Check for useless assignments.
        - atomic # Check for common mistakes using the sync/atomic package.
        - atomicalign # Check for non-64-bits-aligned arguments to sync/atomic functions.
        - bools # Check for common mistakes involving boolean operators.
        - buildtag # Check //go:build and // +build directives.
        - cgocall # Detect some violations of the cgo pointer passing rules.
        - composites # Check for unkeyed composite literals.
        - copylocks # Check for locks erroneously passed by value.
        - deepequalerrors # Check for calls of reflect.DeepEqual on error values.
        - defers # Report common mistakes in defer statements.
        - directive # Check Go toolchain directives such as //go:debug.
        - errorsas # Report passing non-pointer or non-error values to errors.As.
        - fieldalignment # Find structs that would use less memory if their fields were sorted.
        - findcall # Find calls to a particular function.
        - framepointer # Report assembly that clobbers the frame pointer before saving it.
        - hostport # Check format of addresses passed to net.Dial.
        - httpmux # Report using Go 1.22 enhanced ServeMux patterns in older Go versions.
        - httpresponse # Check for mistakes using HTTP responses.
        - ifaceassert # Detect impossible interface-to-interface type assertions.
        - loopclosure # Check references to loop variables from within nested functions.
        - lostcancel # Check cancel func returned by context.WithCancel is called.
        - nilfunc # Check for useless comparisons between functions and nil.
        - nilness # Check for redundant or impossible nil comparisons.
        - printf # Check consistency of Printf format strings and arguments.
        - reflectvaluecompare # Check for comparing reflect.Value values with == or reflect.DeepEqual.
        - shadow # Check for possible unintended shadowing of variables.
        - shift # Check for shifts that equal or exceed the width of the integer.
        - sigchanyzer # Check for unbuffered channel of os.Signal.
        - slog # Check for invalid structured logging calls.
        - sortslice # Check the argument type of sort.Slice.
        - stdmethods # Check signature of methods of well-known interfaces.
        - stdversion # Report uses of too-new standard library symbols.
        - stringintconv # Check for string(int) conversions.
        - structtag # Check that struct field tags conform to reflect.StructTag.Get.
        - testinggoroutine # Report calls to (*testing.T).Fatal from goroutines started by a test.
        - tests # Check for common mistaken usages of tests and examples.
        - timeformat # Check for calls of (time.Time).Format or time.Parse with 2006-02-01.
        - unmarshal # Report passing non-pointer or non-interface values to unmarshal.
        - unreachable # Check for unreachable code.
        - unsafeptr # Check for invalid conversions of uintptr to unsafe.Pointer.
        - unusedresult # Check for unused results of calls to some functions.
        - unusedwrite # Checks for unused writes.
        - waitgroup # Check for misuses of sync.WaitGroup.

      # Enable all analyzers.
      # Default: false
      enable-all: false

      # Disable analyzers by name.
      # (In addition to default
      #   atomicalign, deepequalerrors, fieldalignment, findcall, nilness, reflectvaluecompare, shadow, sortslice,
      #   timeformat, unusedwrite
      # ).
      # Run `GL_DEBUG=govet golangci-lint run --enable=govet` to see default, all available analyzers, and enabled analyzers.
      # Default: []
      # disable:
      #   - appends
      #   - asmdecl
      #   - assign
      #   - atomic
      #   - atomicalign
      #   - bools
      #   - buildtag
      #   - cgocall
      #   - composites
      #   - copylocks
      #   - deepequalerrors
      #   - defers
      #   - directive
      #   - errorsas
      #   - fieldalignment
      #   - findcall
      #   - framepointer
      #   - hostport
      #   - httpmux
      #   - httpresponse
      #   - ifaceassert
      #   - loopclosure
      #   - lostcancel
      #   - nilfunc
      #   - nilness
      #   - printf
      #   - reflectvaluecompare
      #   - shadow
      #   - shift
      #   - sigchanyzer
      #   - slog
      #   - sortslice
      #   - stdmethods
      #   - stdversion
      #   - stringintconv
      #   - structtag
      #   - testinggoroutine
      #   - tests
      #   - timeformat
      #   - unmarshal
      #   - unreachable
      #   - unsafeptr
      #   - unusedresult
      #   - unusedwrite
      #   - waitgroup

      # Settings per analyzer.
      settings:
        # Analyzer name, run `go tool vet help` to see all analyzers.
        printf:
          # Comma-separated list of print function names to check (in addition to default, see `go tool vet help printf`).
          # Default: []
          funcs:
            # - (github.com/golangci/golangci-lint/v2/pkg/logutils.Log).Infof
            # - (github.com/golangci/golangci-lint/v2/pkg/logutils.Log).Warnf
            # - (github.com/golangci/golangci-lint/v2/pkg/logutils.Log).Errorf
            # - (github.com/golangci/golangci-lint/v2/pkg/logutils.Log).Fatalf

        shadow:
          # Whether to be strict about shadowing; can be noisy.
          # Default: false
          strict: false

        # unusedresult:
        # Comma-separated list of functions whose results must be used.
        # (In addition to default:
        #   context.WithCancel, context.WithDeadline, context.WithTimeout, context.WithValue, errors.New, fmt.Errorf,
        #   fmt.Sprint, fmt.Sprintf, sort.Reverse
        # ).
        # Default: []
        # funcs:
        #   - pkg.MyFunc

        # Comma-separated list of names of methods of type func() string whose results must be used.
        # (In addition to default Error,String).
        # Default: []
        # stringmethods:
        #   - MyMethod

    iface:
      # List of analyzers.
      # Default: ["identical"]
      enable:
        - identical # Identifies interfaces in the same package that have identical method sets.
        - unused # Identifies interfaces that are not used anywhere in the same package where the interface is defined.
        - opaque # Identifies functions that return interfaces, but the actual returned value is always a single concrete implementation.
        - unexported # Identifies interfaces that are not exported but are used in exported functions or methods.
      settings:
        {}
        # unused:
        #   # List of packages path to exclude from the check.
        #   # Default: []
        #   exclude:
        #     - github.com/example/log

    importas:
      # Do not allow unaliased imports of aliased packages.
      # Default: false
      no-unaliased: true

      # Do not allow non-required aliases.
      # Default: false
      no-extra-aliases: false

      # # List of aliases
      # # Default: []
      # alias:
      #   # Using `servingv1` alias for `knative.dev/serving/pkg/apis/serving/v1` package.
      #   - pkg: knative.dev/serving/pkg/apis/serving/v1
      #     alias: servingv1

      #   # Using `autoscalingv1alpha1` alias for `knative.dev/serving/pkg/apis/autoscaling/v1alpha1` package.
      #   - pkg: knative.dev/serving/pkg/apis/autoscaling/v1alpha1
      #     alias: autoscalingv1alpha1

      #   # You can specify the package path by regular expression,
      #   # and alias by regular expression expansion syntax like below.
      #   # See https://github.com/julz/importas#use-regular-expression for details.
      #   - pkg: knative.dev/serving/pkg/apis/(\w+)/(v[\w\d]+)
      #     alias: $1$2

      #   # An explicit empty alias can be used to ensure no aliases are used for a package.
      #   # This can be useful if `no-extra-aliases: true` doesn't fit your need.
      #   # Multiple packages can use an empty alias.
      #   - pkg: errors
      #     alias: ""

    inamedparam:
      # Skips check for interface methods with only a single parameter.
      # Default: false
      skip-single-param: false

    interfacebloat:
      # The maximum number of methods allowed for an interface.
      # Default: 10
      max: 10

    lll:
      # Max line length, lines longer will be reported.
      # '\t' is counted as 1 character by default, and can be changed with the tab-width option.
      # Default: 120.
      line-length: 120

      # Tab width in spaces.
      # Default: 1
      tab-width: 1

    maintidx:
      # Show functions with maintainability index lower than N.
      # A high index indicates better maintainability (it's kind of the opposite of complexity).
      # Default: 20
      under: 20

    makezero:
      # Allow only slices initialized with a length of zero.
      # Default: false
      always: false

    misspell:
      # Correct spellings using locale preferences for US or UK.
      # Setting locale to US will correct the British spelling of 'colour' to 'color'.
      # Default is to use a neutral variety of English.
      locale: US

      # Typos to ignore.
      # Should be in lower case.
      # Default: []
      # ignore-rules:
      #   - someword

      # Extra word corrections.
      # `typo` and `correction` should only contain letters.
      # The words are case-insensitive.
      # Default: []
      extra-words:
        - typo: "iff"
          correction: "if"
        - typo: "cancelation"
          correction: "cancellation"

      # Mode of the analysis:
      # - default: checks all the file content.
      # - restricted: checks only comments.
      # Default: ""
      # mode: restricted

    mnd:
      # List of enabled checks, see https://github.com/tommy-muehle/go-mnd/#checks for description.
      # Default: ["argument", "case", "condition", "operation", "return", "assign"]
      checks:
        - argument
        - case
        - condition
        - operation
        - return
        - assign

      # List of numbers to exclude from analysis.
      # The numbers should be written as string.
      # Values always ignored: "1", "1.0", "0" and "0.0".
      # Default: []
      ignored-numbers:
        - "0666"
        - "0755"
        - "42"

      # List of file patterns to exclude from analysis.
      # Values always ignored: `.+_test.go`.
      # Default: []
      # ignored-files:
      #   - 'magic1_.+\.go$'

      # List of function patterns to exclude from analysis.
      # Following functions are always ignored: `time.Date`,
      # `strconv.FormatInt`, `strconv.FormatUint`, `strconv.FormatFloat`,
      # `strconv.ParseInt`, `strconv.ParseUint`, `strconv.ParseFloat`.
      # Default: []
      # ignored-functions:
      #   - '^math\.'
      #   - '^http\.StatusText$'

    nakedret:
      # Make an issue if func has more lines of code than this setting, and it has naked returns.
      # Default: 30
      max-func-lines: 30

    nestif:
      # Minimal complexity of if statements to report.
      # Default: 5
      min-complexity: 10

    nilnil:
      # To check functions with only two return values (`return nil, nil`).
      # If disabled then returns like `return nil, nil, ..., nil` are supported.
      # Default: true
      only-two: false

      # In addition, detect opposite situation (simultaneous return of non-nil error and valid value).
      # E.g, `return clone, fh.indexer.Update(clone)` will be considered as invalid.
      # Default: false
      detect-opposite: false

      # List of return types to check.
      # Default: ["chan", "func", "iface", "map", "ptr", "uintptr", "unsafeptr"]
      checked-types:
        - chan
        - func
        - iface
        - map
        - ptr
        - uintptr
        - unsafeptr

    nlreturn:
      # Size of the block (including return statement that is still "OK"),
      # so no return split required.
      # Default: 1
      block-size: 2

    nonamedreturns:
      # Report named error if it is assigned inside defer.
      # Default: false
      report-error-in-defer: false

    paralleltest:
      # Ignore missing calls to `t.Parallel()` and only report incorrect uses of it.
      # Default: false
      ignore-missing: true

      # Ignore missing calls to `t.Parallel()` in subtests. Top-level tests are
      # still required to have `t.Parallel`, but subtests are allowed to skip it.
      # Default: false
      ignore-missing-subtests: true

    perfsprint:
      # Enable/disable optimization of integer formatting.
      # Default: true
      integer-format: true

      # Optimizes even if it requires an int or uint type cast.
      # Default: true
      int-conversion: true

      # Enable/disable optimization of error formatting.
      # Default: true
      error-format: true

      # Optimizes into `err.Error()` even if it is only equivalent for non-nil errors.
      # Default: false
      err-error: false

      # Optimizes `fmt.Errorf`.
      # Default: true
      errorf: true

      # Enable/disable optimization of string formatting.
      # Default: true
      string-format: true

      # Optimizes `fmt.Sprintf` with only one argument.
      # Default: true
      sprintf1: true

      # Optimizes into strings concatenation.
      # Default: true
      strconcat: true

      # Enable/disable optimization of bool formatting.
      # Default: true
      bool-format: true

      # Enable/disable optimization of hex formatting.
      # Default: true
      hex-format: true

    # protogetter:
    #   # Skip files generated by specified generators from the checking.
    #   # Checks only the file's initial comment, which must follow the format: "// Code generated by <generator-name>".
    #   # Files generated by protoc-gen-go, protoc-gen-go-grpc, and protoc-gen-grpc-gateway are always excluded automatically.
    #   # Default: []
    #   skip-generated-by: ["protoc-gen-go-my-own-generator"]
    #   # Skip files matching the specified glob pattern from the checking.
    #   # Default: []
    #   skip-files:
    #     - "*.pb.go"
    #     - "*/vendor/*"
    #     - "/full/path/to/file.go"
    #   # Skip any generated files from the checking.
    #   # Default: false
    #   skip-any-generated: true
    #   # Skip first argument of append function.
    #   # Default: false
    #   replace-first-arg-in-append: true

    recvcheck:
      # Disables the built-in method exclusions:
      # - `MarshalText`
      # - `MarshalJSON`
      # - `MarshalYAML`
      # - `MarshalXML`
      # - `MarshalBinary`
      # - `GobEncode`
      # Default: false
      disable-builtin: false

      # User-defined method exclusions.
      # The format is `struct_name.method_name` (ex: `Foo.MethodName`).
      # A wildcard `*` can use as a struct name (ex: `*.MethodName`).
      # Default: []
      exclusions:
        - "*.Value"

    sloglint:
      # See also https://github.com/go-simpler/sloggen

      # Enforce not mixing key-value pairs and attributes.
      # https://github.com/go-simpler/sloglint?tab=readme-ov-file#no-mixed-arguments
      # Default: true
      no-mixed-args: false

      # Enforce using key-value pairs only (overrides no-mixed-args, incompatible with attr-only).
      # https://github.com/go-simpler/sloglint?tab=readme-ov-file#key-value-pairs-only
      # Default: false
      kv-only: true

      # Enforce using attributes only (overrides no-mixed-args, incompatible with kv-only).
      # https://github.com/go-simpler/sloglint?tab=readme-ov-file#attributes-only
      # Default: false
      attr-only: false

      # Enforce not using global loggers.
      # Values:
      # - "": disabled
      # - "all": report all global loggers
      # - "default": report only the default slog logger
      # https://github.com/go-simpler/sloglint?tab=readme-ov-file#no-global
      # Default: ""
      no-global: ""

      # Enforce using methods that accept a context.
      # Values:
      # - "": disabled
      # - "all": report all contextless calls
      # - "scope": report only if a context exists in the scope of the outermost function
      # https://github.com/go-simpler/sloglint?tab=readme-ov-file#context-only
      # Default: ""
      context: "all"

      # Enforce using static values for log messages.
      # https://github.com/go-simpler/sloglint?tab=readme-ov-file#static-messages
      # Default: false
      static-msg: false

      # Enforce message style.
      # Values: lowercased, capitalized
      # https://github.com/go-simpler/sloglint?tab=readme-ov-file#message-style
      # Default: ""
      msg-style: capitalized

      # Enforce using constants instead of raw keys.
      # https://github.com/go-simpler/sloglint?tab=readme-ov-file#no-raw-keys
      # Default: false
      no-raw-keys: true

      # Enforce key naming convention.
      # Values: snake, kebab, camel, pascal
      # https://github.com/go-simpler/sloglint?tab=readme-ov-file#key-naming-convention
      # Default: ""
      key-naming-case: snake

      # Enforce not using specific keys.
      # https://github.com/go-simpler/sloglint?tab=readme-ov-file#forbidden-keys
      # Default: []
      forbidden-keys:
        - time
        - level
        - msg
        - source
        - foo

      # Enforce putting arguments on separate lines.
      # https://github.com/go-simpler/sloglint?tab=readme-ov-file#arguments-on-separate-lines
      # Default: false
      args-on-sep-lines: false

    spancheck:
      # Checks to enable.
      # Options include:
      # - `end`: check that `span.End()` is called
      # - `record-error`: check that `span.RecordError(err)` is called when an error is returned
      # - `set-status`: check that `span.SetStatus(codes.Error, msg)` is called when an error is returned
      # Default: ["end"]
      checks:
        - end
        - record-error
        - set-status

      # A list of regexes for function signatures that silence `record-error` and `set-status` reports
      # if found in the call path to a returned error.
      # https://github.com/jjti/go-spancheck#ignore-check-signatures
      # Default: []
      ignore-check-signatures:
        - "telemetry.RecordError"

      # A list of regexes for additional function signatures that create spans.
      # This is useful if you have a utility method to create spans.
      # Each entry should be of the form `<regex>:<telemetry-type>`, where `telemetry-type` can be `opentelemetry` or `opencensus`.
      # https://github.com/jjti/go-spancheck#extra-start-span-signatures
      # Default: []
      # extra-start-span-signatures:
      #   - "github.com/user/repo/telemetry/trace.Start:opentelemetry"

    staticcheck:
      # https://staticcheck.dev/docs/configuration/options/#dot_import_whitelist
      # Default: ["github.com/mmcloughlin/avo/build", "github.com/mmcloughlin/avo/operand", "github.com/mmcloughlin/avo/reg"]
      # dot-import-whitelist:
      #   - fmt

      # https://staticcheck.dev/docs/configuration/options/#initialisms
      # Default: ["ACL", "API", "ASCII", "CPU", "CSS", "DNS", "EOF", "GUID", "HTML", "HTTP", "HTTPS", "ID", "IP", "JSON", "QPS", "RAM", "RPC", "SLA", "SMTP", "SQL", "SSH", "TCP", "TLS", "TTL", "UDP", "UI", "GID", "UID", "UUID", "URI", "URL", "UTF8", "VM", "XML", "XMPP", "XSRF", "XSS", "SIP", "RTP", "AMQP", "DB", "TS"]
      # initialisms: []

      # https://staticcheck.dev/docs/configuration/options/#http_status_code_whitelist
      # Default: ["200", "400", "404", "500"]
      # http-status-code-whitelist: ["200", "400", "404", "500"]

      # SAxxxx checks in https://staticcheck.dev/docs/configuration/options/#checks
      # Example (to disable some checks): [ "all", "-SA1000", "-SA1001"]
      # Run `GL_DEBUG=staticcheck golangci-lint run --enable=staticcheck` to see all available checks and enabled by config checks.
      # Default: ["all", "-ST1000", "-ST1003", "-ST1016", "-ST1020", "-ST1021", "-ST1022"]
      checks: ["all"]

    tagalign:
      # Align and sort can be used together or separately.
      #
      # Whether enable align. If true, the struct tags will be aligned.
      # E.g.:
      # type FooBar struct {
      #     Bar    string `json:"bar" validate:"required"`
      #     FooFoo int8   `json:"foo_foo" validate:"required"`
      # }
      # will be formatted to:
      # type FooBar struct {
      #     Bar    string `json:"bar"     validate:"required"`
      #     FooFoo int8   `json:"foo_foo" validate:"required"`
      # }
      # Default: true.
      align: true

      # Whether enable tags sort.
      # If true, the tags will be sorted by name in ascending order.
      # E.g.: `xml:"bar" json:"bar" validate:"required"` -> `json:"bar" validate:"required" xml:"bar"`.
      # Default: true
      sort: true

      # Specify the order of tags, the other tags will be sorted by name.
      # This option will be ignored if `sort` is false.
      # Default: []
      order: []

      # Whether enable strict style.
      # In this style, the tags will be sorted and aligned in the dictionary order,
      # and the tags with the same name will be aligned together.
      # Note: This option will be ignored if 'align' or 'sort' is false.
      # Default: false
      strict: true

    tagliatelle:
      # Checks the struct tag name case.
      case:
        # Defines the association between tag name and case.
        # Any struct tag name can be used.
        # Supported string cases:
        # - `camel`
        # - `pascal`
        # - `kebab`
        # - `snake`
        # - `upperSnake`
        # - `goCamel`
        # - `goPascal`
        # - `goKebab`
        # - `goSnake`
        # - `upper`
        # - `lower`
        # - `header`
        rules:
          avro: snake
          bson: camel
          env: upperSnake
          envconfig: upperSnake
          ini: snake
          json: camel
          mapstructure: kebab
          toml: snake
          xml: camel
          yaml: camel

        # Defines the association between tag name and case.
        # Important: the `extended-rules` overrides `rules`.
        # Default: empty
        extended-rules:
          json:
            # Supported string cases:
            # - `camel`
            # - `pascal`
            # - `kebab`
            # - `snake`
            # - `upperSnake`
            # - `goCamel`
            # - `goPascal`
            # - `goKebab`
            # - `goSnake`
            # - `header`
            # - `lower`
            # - `header`
            #
            # Required
            case: camel

            # # Adds 'AMQP', 'DB', 'GID', 'RTP', 'SIP', 'TS' to initialisms,
            # # and removes 'LHS', 'RHS' from initialisms.
            # # Default: false
            # extra-initialisms: true

            # # Defines initialism additions and overrides.
            # # Default: empty
            # initialism-overrides:
            #   DB: true # add a new initialism
            #   LHS: false # disable a default initialism.
            #   # ...

        # Uses the struct field name to check the name of the struct tag.
        # Default: false
        use-field-name: false

        # The field names to ignore.
        # Default: []
        # ignored-fields:
        #   - Bar
        #   - Foo

        # Overrides the default/root configuration.
        # Default: []
        # overrides:
        #   - # The package path (uses `/` only as a separator).
        #     # Required
        #     pkg: foo/bar
        #     # Default: empty or the same as the default/root configuration.
        #     rules:
        #       json: snake
        #       xml: pascal
        #     # Default: empty or the same as the default/root configuration.
        #     extended-rules:
        #     # Same options as the base `extended-rules`.
        #     # Default: false (WARNING: it doesn't follow the default/root configuration)
        #     use-field-name: true
        #     # The field names to ignore.
        #     # Default: [] or the same as the default/root configuration.
        #     ignored-fields:
        #       - Bar
        #       - Foo
        #     # Ignore the package (takes precedence over all other configurations).
        #     # Default: false
        #     ignore: true

    thelper:
      test:
        # Check *testing.T is first param (or after context.Context) of helper function.
        # Default: true
        first: true

        # Check *testing.T param has name t.
        # Default: true
        name: true

        # Check t.Helper() begins helper function.
        # Default: true
        begin: true

      benchmark:
        # Check *testing.B is first param (or after context.Context) of helper function.
        # Default: true
        first: true

        # Check *testing.B param has name b.
        # Default: true
        name: true

        # Check b.Helper() begins helper function.
        # Default: true
        begin: true

      tb:
        # Check *testing.TB is first param (or after context.Context) of helper function.
        # Default: true
        first: true

        # Check *testing.TB param has name tb.
        # Default: true
        name: true

        # Check tb.Helper() begins helper function.
        # Default: true
        begin: true

      fuzz:
        # Check *testing.F is first param (or after context.Context) of helper function.
        # Default: true
        first: true

        # Check *testing.F param has name f.
        # Default: true
        name: true

        # Check f.Helper() begins helper function.
        # Default: true
        begin: true

    usestdlibvars:
      # Suggest the use of http.MethodXX.
      # Default: true
      http-method: true

      # Suggest the use of http.StatusXX.
      # Default: true
      http-status-code: true

      # Suggest the use of time.Month in time.Date.
      # Default: false
      time-date-month: false

      # Suggest the use of time.Weekday.String().
      # Default: true
      time-weekday: true

      # Suggest the use of time.Month.String().
      # Default: false
      time-month: false

      # Suggest the use of time.Layout.
      # Default: false
      time-layout: false

      # Suggest the use of crypto.Hash.String().
      # Default: false
      crypto-hash: false

      # Suggest the use of rpc.DefaultXXPath.
      # Default: false
      default-rpc-path: false

      # Suggest the use of sql.LevelXX.String().
      # Default: false
      sql-isolation-level: false

      # Suggest the use of tls.SignatureScheme.String().
      # Default: false
      tls-signature-scheme: false

      # Suggest the use of constant.Kind.String().
      # Default: false
      constant-kind: false

    unconvert:
      # Remove conversions that force intermediate rounding.
      # Default: false
      fast-math: false

      # Be more conservative (experimental).
      # Default: false
      safe: false

    unparam:
      # Inspect exported functions.
      #
      # Set to true if no external program/library imports your code.
      # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
      # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
      # with golangci-lint call it on a directory with the changed file.
      #
      # Default: false
      check-exported: false

    unused:
      # Mark all struct fields that have been written to as used.
      # Default: true
      field-writes-are-uses: true

      # Treat IncDec statement (e.g. `i++` or `i--`) as both read and write operation instead of just write.
      # Default: false
      post-statements-are-reads: false

      # Mark all exported fields as used.
      # default: true
      exported-fields-are-used: true

      # Mark all function parameters as used.
      # default: true
      parameters-are-used: true

      # Mark all local variables as used.
      # default: true
      local-variables-are-used: true

      # Mark all identifiers inside generated files as used.
      # Default: true
      generated-is-used: true

    whitespace:
      # Enforces newlines (or comments) after every multi-line if statement.
      # Default: false
      multi-if: false

      # Enforces newlines (or comments) after every multi-line function signature.
      # Default: false
      multi-func: false

    wrapcheck:
      # An array of strings specifying additional substrings of signatures to ignore.
      # Unlike 'ignore-sigs', this option extends the default set (or the set specified in 'ignore-sigs') without replacing it entirely.
      # This allows you to add specific signatures to the ignore list
      # while retaining the defaults or any items in 'ignore-sigs'.
      # Default: []
      # extra-ignore-sigs:
      #   - .CustomError(
      #   - .SpecificWrap(

      # An array of strings that specify substrings of signatures to ignore.
      # If this set, it will override the default set of ignored signatures.
      # See https://github.com/tomarrell/wrapcheck#configuration for more information.
      # Default: [".Errorf(", "errors.New(", "errors.Unwrap(", "errors.Join(", ".Wrap(", ".Wrapf(", ".WithMessage(", ".WithMessagef(", ".WithStack("]
      ignore-sigs:
        - .Errorf(
        - errors.New(
        - errors.Unwrap(
        - errors.Join(
        - .Wrap(
        - .Wrapf(
        - .WithMessage(
        - .WithMessagef(
        - .WithStack(

      # An array of strings that specify regular expressions of signatures to ignore.
      # Default: []
      # ignore-sig-regexps:
      #   - \.New.*Error\(

      # An array of strings that specify globs of packages to ignore.
      # Default: []
      # ignore-package-globs:
      #   - encoding/*
      #   - github.com/pkg/*

      # An array of strings that specify regular expressions of interfaces to ignore.
      # Default: []
      # ignore-interface-regexps:
      #   - ^(?i)c(?-i)ach(ing|e)

      # Determines whether wrapcheck should report errors returned from inside the package.
      # Default: false
      report-internal-errors: true

    wsl_v5:
      # Allow cuddling a variable if it's used first in the immediate following block,
      # even if the statement with the block doesn't use the variable.
      # https://github.com/bombsimon/wsl/tree/main?tab=readme-ov-file#configuration
      # Default: true
      allow-first-in-block: true

      # Same as above,
      # but allows cuddling if the variable is used anywhere in the following (or nested) block.
      # https://github.com/bombsimon/wsl/tree/main?tab=readme-ov-file#configuration
      # Default: false
      allow-whole-block: false

      # If a block contains more than this number of lines,
      # the branch statement needs to be separated by whitespace.
      # https://github.com/bombsimon/wsl/tree/main?tab=readme-ov-file#configuration
      # Default: 2
      branch-max-lines: 2

      # If set to a non-negative number,
      # case blocks need to end with whitespace if exceeding this number
      # https://github.com/bombsimon/wsl/tree/main?tab=readme-ov-file#configuration
      # Default: 0
      case-max-lines: 0

      # Default checks to use.
      # Can be `all`, `none`, `default` or empty.
      # https://github.com/bombsimon/wsl/tree/main?tab=readme-ov-file#checks-and-configuration
      # Default: ""
      default: none

      # Enabled checks.
      # Will be additive to any presets.
      # https://github.com/bombsimon/wsl/tree/main?tab=readme-ov-file#checks-and-configuration
      # Default: []
      enable:
        - assign
        - branch
        - decl
        - defer
        - expr
        - for
        - go
        - if
        - inc-dec
        - label
        - range
        - return
        - select
        - send
        - switch
        - type-switch
        - append
        - assign-exclusive
        - assign-expr
        - err
        - leading-whitespace
        - trailing-whitespace

      # Disable checks.
      # Will be subtractive to any preset.
      # https://github.com/bombsimon/wsl/tree/main?tab=readme-ov-file#checks-and-configuration
      # Default: []
      disable: []

  exclusions:
    rules:
      # Exclude some linters from running on tests files.
      - source: lint:ignore_length
        linters:
          - lll

      - source: lint:allow_666
        linters:
          - gosec

      - source: lint:allow_possible_insecure
        linters:
          - gosec

      - source: lint:allow_param
        linters:
          - unparam

      - source: lint:allow_raw_number
        linters:
          - mnd

      - source: lint:allow_commented
        text: "commentedOutCode: may want to remove commented-out code"
        linters:
          - gocritic

      - source: lint:allow_nesting
        linters:
          - nestif

      - source: lint:no_dupe
        linters:
          - dupl

      - source: lint:allow_errorf
        linters:
          - err113
          - goerr113

      - source: lint:allow_unwrapped_errors
        linters:
          - wrapcheck

      - source: lint:allow_tls_min_version
        text: (SA1019|G402)
        linters:
          - staticcheck
          - gosec

      - source: lint:allow_return_interface
        text: (returns interface)
        linters:
          - ireturn

      - source: lint:not_a_secret
        text: (G101)
        linters:
          - gosec

      - source: lint:allow_unhandled
        text: (G104)
        linters:
          - gosec

      - source: lint:not_crypto
        text: (G404)
        linters:
          - gosec

      - source: lint:allow_human_errors
        text: (error-strings)
        linters:
          - revive

      - source: lint:allow_package_name
        text: (avoid meaningless package names)
        linters:
          - revive

      - source: lint:allow_large_memory
        text: (hugeParam)
        linters:
          - gocritic

      - source: lint:allow_format
        linters:
          - gofumpt
          - tagliatelle

      - source: lint:allow_unused
        text: (is unused)
        linters:
          - unused

      - source: lint:allow_init
        text: (don't use `init` function)
        linters:
          - gochecknoinits

      - source: lint:allow_cuddle
        text: (cuddle)
        linters:
          - wsl

      - source: lint:allow_no_pkg_comment
        text: (ST1000)
        linters:
          - stylecheck

      - source: lint:allow_complexity
        text: (cognitive complexity)
        linters:
          - gocognit

      - source: lint:no_const
        text: (make it a constant)
        linters:
          - goconst

      - source: fmt\.(Fprint|Println)
        text: (is not checked)
        linters:
          - errcheck

formatters:
  # Enable specific formatter.
  # Default: [] (uses standard Go formatting)
  enable:
    # - gci
    - gofmt
    - gofumpt
    - goimports
    - golines
    # - swaggo

  # Formatters settings.
  settings:
    gofmt:
      # Simplify code: gofmt with `-s` option.
      # Default: true
      simplify: true

      # Apply the rewrite rules to the source before reformatting.
      # https://pkg.go.dev/cmd/gofmt
      # Default: []
      rewrite-rules:
        - pattern: "interface{}"
          replacement: "any"
        - pattern: "a[b:len(a)]"
          replacement: "a[b:]"

    gofumpt:
      # Module path which contains the source code being formatted.
      # Default: ""
      module-path: ""

      # Choose whether to use the extra rules.
      # Default: false
      extra-rules: true

    goimports:
      # A list of prefixes, which, if set, checks import paths
      # with the given prefixes are grouped after 3rd-party packages.
      # Default: []
      local-prefixes:
        - github.com/northwood-labs
        - github.com/skyzyx

    golines:
      # Target maximum line length.
      # Default: 100
      max-len: 120

      # Length of a tabulation.
      # Default: 4
      tab-len: 4

      # Shorten single-line comments.
      # Default: false
      shorten-comments: false

      # Default: true
      reformat-tags: true

      # Split chained methods on the dots as opposed to the arguments.
      # Default: true
      chain-split-dots: false

  exclusions:
    # Log a warning if an exclusion path is unused.
    # Default: false
    warn-unused: false

    # Mode of the generated files analysis.
    #
    # - `strict`: sources are excluded by strictly following the Go generated file convention.
    #    Source files that have lines matching only the following regular expression will be excluded: `^// Code generated .* DO NOT EDIT\.$`
    #    This line must appear before the first non-comment, non-blank text in the file.
    #    https://go.dev/s/generatedcode
    # - `lax`: sources are excluded if they contain lines like `autogenerated file`, `code generated`, `do not edit`, etc.
    # - `disable`: disable the generated files exclusion.
    #
    # Default: lax
    generated: strict

issues:
  # Maximum issues count per one linter.
  # Set to 0 to disable.
  # Default: 50
  max-issues-per-linter: 0

  # Maximum count of issues with the same text.
  # Set to 0 to disable.
  # Default: 3
  max-same-issues: 0

  # Make issues output unique by line.
  # Default: true
  uniq-by-line: true

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing large codebase.
  # It's not practical to fix all existing issues at the moment of integration:
  # much better don't allow issues in new code.
  #
  # Default: false
  new: false

  # Show only new issues created after the best common ancestor (merge-base against HEAD).
  # Default: ""
  # new-from-merge-base: main

  # Show only new issues created after git revision `REV`.
  # Default: ""
  # new-from-rev: HEAD

  # Show only new issues created in git patch with set file path.
  # Default: ""
  # new-from-patch: path/to/patch/file

  # Show issues in any part of update files (requires new-from-rev or new-from-patch).
  # Default: false
  # whole-files: true

  # Fix found issues (if it's supported by the linter).
  # Default: false
  fix: true

# Output configuration options.
output:
  # The formats used to render issues.
  formats:
    # Prints issues in a text format with colors, line number, and linter name.
    # This format is the default format.
    text:
      # Output path can be either `stdout`, `stderr` or path to the file to write to.
      # Default: stdout
      path: stdout

      # Print linter name in the end of issue text.
      # Default: true
      print-linter-name: true

      # Print lines of code with issue.
      # Default: true
      print-issued-lines: true

      # Use colors.
      # Default: true
      colors: true

    # Prints issues in a JSON representation.
    # json:
    #   # Output path can be either `stdout`, `stderr` or path to the file to write to.
    #   # Default: stdout
    #   path: stdout

    # Prints issues in columns representation separated by tabulations.
    # tab:
    #   # Output path can be either `stdout`, `stderr` or path to the file to write to.
    #   # Default: stdout
    #   path: stdout

    #   # Print linter name in the end of issue text.
    #   # Default: true
    #   print-linter-name: true

    #   # Use colors.
    #   # Default: true
    #   colors: true

    # Prints issues in the Checkstyle format.
    # checkstyle:
    #   # Output path can be either `stdout`, `stderr` or path to the file to write to.
    #   # Default: stdout
    #   path: stdout

    # Prints issues in the Code Climate format.
    # code-climate:
    #   # Output path can be either `stdout`, `stderr` or path to the file to write to.
    #   # Default: stdout
    #   path: stdout

    # Prints issues in the JUnit XML format.
    # junit-xml:
    #   # Output path can be either `stdout`, `stderr` or path to the file to write to.
    #   # Default: stdout
    #   path: stdout
    #   # Support extra JUnit XML fields.
    #   # Default: false
    #   extended: true

    # Prints issues in the TeamCity format.
    # teamcity:
    #   # Output path can be either `stdout`, `stderr` or path to the file to write to.
    #   # Default: stdout
    #   path: ./path/to/output.txt

    # Prints issues in the SARIF format.
    # sarif:
    #   # Output path can be either `stdout`, `stderr` or path to the file to write to.
    #   # Default: stdout
    #   path: ./path/to/output.json

  # Add a prefix to the output file references.
  # This option is ignored when using `output.path-mode: abs` mode.
  # Default: ""
  path-prefix: ""

  # By default, the report are related to the path obtained by `run.relative-path-mode`.
  # The mode `abs` allows to show absolute file paths instead of relative file paths.
  # The option `output.path-prefix` is ignored when using `abs` mode.
  # Default: ""
  path-mode: "abs"

  # Order to use when sorting results.
  # Possible values: `file`, `linter`, and `severity`.
  #
  # If the severity values are inside the following list, they are ordered in this order:
  #   1. error
  #   2. warning
  #   3. high
  #   4. medium
  #   5. low
  # Either they are sorted alphabetically.
  #
  # Default: ["linter", "file"]
  sort-order:
    - linter
    - severity
    - file # filepath, line, and column.

  # Show statistics per linter.
  # Default: true
  show-stats: true

# Options for analysis running.
run:
  # Timeout for total work, e.g. 30s, 5m, 5m30s.
  # If the value is lower or equal to 0, the timeout is disabled.
  # Default: 0 (disabled)
  timeout: 1m

  # The mode used to evaluate relative paths.
  # It's used by exclusions, Go plugins, and some linters.
  # The value can be:
  # - `gomod`: the paths will be relative to the directory of the `go.mod` file.
  # - `gitroot`: the paths will be relative to the git root (the parent directory of `.git`).
  # - `cfg`: the paths will be relative to the configuration file.
  # - `wd` (NOT recommended): the paths will be relative to the place where golangci-lint is run.
  # Default: cfg
  relative-path-mode: gomod

  # Exit code when at least one issue was found.
  # Default: 1
  issues-exit-code: 1

  # Include test files or not.
  # Default: true
  tests: true

  # List of build tags, all linters use it.
  # Default: []
  # build-tags:
  #   - mytag

  # If set, we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  #
  # Allowed values: readonly|vendor|mod
  # Default: ""
  modules-download-mode: readonly

  # Allow multiple parallel golangci-lint instances running.
  # If false, golangci-lint acquires file lock on start.
  # Default: false
  allow-parallel-runners: true

  # Allow multiple golangci-lint instances running, but serialize them around a lock.
  # If false, golangci-lint exits with an error if it fails to acquire file lock on start.
  # Default: false
  allow-serial-runners: true

  # Define the Go version limit.
  # Default: use Go version from the go.mod file, fallback on the env var `GOVERSION`, fallback on 1.22.
  go: "1.24"

  # Number of operating system threads (`GOMAXPROCS`) that can execute golangci-lint simultaneously.
  # Default: 0 (automatically set to match Linux container CPU quota and
  # fall back to the number of logical CPUs in the machine)
  concurrency: 0

severity:
  # Set the default severity for issues.
  #
  # If severity rules are defined and the issues do not match or no severity is provided to the rule
  # this will be the default severity applied.
  # Severities should match the supported severity names of the selected out format.
  # - Code climate: https://docs.codeclimate.com/docs/issues#issue-severity
  # - Checkstyle: https://checkstyle.sourceforge.io/property_types.html#SeverityLevel
  # - GitHub: https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-error-message
  # - TeamCity: https://www.jetbrains.com/help/teamcity/service-messages.html#Inspection+Instance
  #
  # `@linter` can be used as severity value to keep the severity from linters (e.g. revive, gosec, ...)
  #
  # Default: ""
  default: error

  # When a list of severity rules are provided, severity information will be added to lint issues.
  # Severity rules have the same filtering capability as exclude rules
  # except you are allowed to specify one matcher per severity rule.
  #
  # `@linter` can be used as severity value to keep the severity from linters (e.g. revive, gosec, ...)
  #
  # Only affects out formats that support setting severity information.
  #
  # Default: []
  # rules:
