---
# This file contains all available configuration options with their default
# values.

# options for analysis running
run:
  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 1m

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1

  # include test files or not, default is true
  tests: false

  # list of build tags, all linters use it. Default is empty list.
  # build-tags: []

  # which dirs to skip: issues from them won't be reported; can use regexp here:
  # generated.*, regexp is applied on full path; default value is empty list,
  # but default dirs are skipped independently from this option's value (see
  # skip-dirs-use-default).
  skip-dirs:
    - assets

  # default is true. Enables skipping of directories: vendor$, third_party$,
  #   testdata$, examples$, Godeps$, builtin$
  skip-dirs-use-default: true

  # which files to skip: they will be analyzed, but issues from them won't be
  # reported. Default value is empty list, but there is no need to include all
  # autogenerated files, we confidently recognize autogenerated files. If it's
  # not please let us know. skip-files: [] by default isn't set. If set we pass
  # it to "go list -mod={option}". From "go help modules": If invoked with
  # -mod=readonly, the go command is disallowed from the implicit automatic
  # updating of go.mod described above. Instead, it fails when any changes to
  # go.mod are needed. This setting is most useful to check that go.mod does not
  # need updates, such as in a continuous integration and testing system. If
  # invoked with -mod=vendor, the go command assumes that the vendor directory
  # holds the correct copies of dependencies and ignores the dependency
  # descriptions in go.mod. modules-download-mode: readonly|release|vendor

linters:
  # please, do not use `enable-all`: it's deprecated and will be removed soon.
  # inverted configuration with `enable-all` and `disable` is not scalable
  # during updates of golangci-lint
  disable-all: true
  enable:
    - asciicheck
    - bidichk
    - bodyclose
    - decorder
    - dogsled
    - dupl
    - durationcheck
    - errcheck
    - errchkjson
    - errorlint
    - exhaustive
    - exportloopref
    - forcetypeassert
    - gochecknoinits
    - goconst
    - gocritic
    - godot
    - godox
    - goerr113
    - gofmt
    - gofumpt
    - goheader
    - goimports
    - gomnd
    # - gomoddirectives
    - goprintffuncname
    - gosec
    - gosimple
    - govet
    - grouper
    - importas
    - ineffassign
    - ireturn
    - lll
    - maintidx
    - makezero
    - misspell
    - nakedret
    - nestif
    - nilerr
    - nilnil
    - nlreturn
    - noctx
    - nolintlint
    - paralleltest
    - prealloc
    - predeclared
    - promlinter
    - revive
    - rowserrcheck
    - sqlclosecheck
    - staticcheck
    - stylecheck
    - tagliatelle
    - tenv
    - testpackage
    - thelper
    - tparallel
    - typecheck
    - unconvert
    - unparam
    - unused
    - wastedassign
    - whitespace
    - wrapcheck
    - wsl

  # ==> don't enable:
  # - cyclop
  # - exhaustruct
  # - forbidigo
  # - funlen
  # - gci
  # - gocognit
  # - gocyclo
  # - varnamelen

# output configuration options
output:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate, default is "colored-line-number"
  format: colored-line-number

  # print lines of code with issue, default is true
  print-issued-lines: true

  # print linter name in the end of issue text, default is true
  print-linter-name: true

  # Make issues output unique by line. Default: true
  uniq-by-line: false

  # Add a prefix to the output file references. Default is no prefix.
  path-prefix: ''

  # Sort results by: filepath, line and column.
  sort-results: true

# all available settings of specific linters
linters-settings:
  # asciicheck:
  # bidichk:
  # bodyclose:

  decorder:
    # Required order of `type`, `const`, `var` and `func` declarations inside a file.
    # Default: types before constants before variables before functions.
    dec-order:
      - const
      - var
      - type
      - func

    # If true, order of declarations is not checked at all.
    # Default: true (disabled)
    disable-dec-order-check: false

    # If true, `init` func can be anywhere in file (does not have to be declared before all other functions).
    # Default: true (disabled)
    disable-init-func-first-check: false

    # If true, multiple global `type`, `const` and `var` declarations are allowed.
    # Default: true (disabled)
    disable-dec-num-check: false

  dogsled:
    # checks assignments with too many blank identifiers; default is 2
    max-blank-identifiers: 2

  dupl:
    # tokens count to trigger issue, 150 by default
    threshold: 100

  # durationcheck:

  errcheck:
    # report about not checking of errors in type assetions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: true

    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    # default is false: such cases aren't reported by default.
    check-blank: false

  errchkjson:
    # With check-error-free-encoding set to true, errchkjson does warn about
    # errors from json encoding functions that are safe to be ignored, because
    # they are not possible to happen.
    #
    # if check-error-free-encoding is set to true and errcheck linter is
    # enabled, it is recommended to add the following exceptions to prevent from
    # false positives:
    #
    #     linters-settings:
    #       errcheck:
    #         exclude-functions:
    #           - encoding/json.Marshal
    #           - encoding/json.MarshalIndent
    #
    # Default: false
    check-error-free-encoding: false

    # Issue on struct encoding that doesn't have exported fields.
    # Default: false
    report-no-exported: false

  errorlint:
    # Check whether fmt.Errorf uses the %w verb for formatting errors.
    # See the https://github.com/polyfloyd/go-errorlint for caveats.
    # Default: true
    errorf: true

    # Check for plain type assertions and type switches.
    # Default: true
    asserts: true

    # Check for plain error comparisons.
    # Default: true
    comparison: true

  exhaustive:
    # Check switch statements in generated files also.
    # Default: false
    check-generated: true

    # Presence of "default" case in switch statements satisfies exhaustiveness,
    # even if all enum members are not listed.
    # Default: false
    default-signifies-exhaustive: false

    # Enum members matching the supplied regex do not have to be listed in
    # switch statements to satisfy exhaustiveness.
    # Default: ""
    # ignore-enum-members: "Example.+"

    # Consider enums only in package scopes, not in inner scopes.
    # Default: false
    # package-scope-only: true

  # exportloopref:
  # forcetypeassert:
  # gochecknoinits:

  goconst:
    # minimal length of string constant, 3 by default
    min-len: 80
    # minimal occurrences count to trigger, 3 by default
    min-occurrences: 3

  gocritic:
    # Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint run`
    # to see all tags and checks. Empty list by default. See
    # https://github.com/go-critic/go-critic#usage -> section "Tags".
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style

    # Which checks should be enabled; can't be combined with 'disabled-checks';
    # See https://go-critic.github.io/overview#checks-overview
    # To check which checks are enabled run `GL_DEBUG=gocritic golangci-lint run`
    # By default list of stable checks is used.
    # enabled-checks:
    #   - rangeValCopy

    # Which checks should be disabled; can't be combined with 'enabled-checks';
    # default is empty
    disabled-checks:
      - wrapperFunc
      - dupImport # https://github.com/go-critic/go-critic/issues/845
      - ifElseChain
      - octalLiteral

    settings: # settings passed to gocritic
      captLocal: # must be valid enabled check name
        paramsOnly: true
      rangeValCopy:
        sizeThreshold: 32

  # godot:

  godox:
    # report any comments starting with keywords, this is useful for TODO or
    # FIXME comments that might be left in the code accidentally and should be
    # resolved before merging
    keywords:
      - BUG
      - FIXME
      - HACK
      - NOTE
      - OPTIMIZE
      - TODO
      - '@todo'

  # goerr113:

  gofmt:
    # simplify code: gofmt with `-s` option, true by default
    simplify: true

  gofumpt:
    # Select the Go version to target.
    lang-version: '1.21'

    # Module path which contains the source code being formatted.
    # Default: ""
    # module-path: github.com/org/project

    # Choose whether to use the extra rules.
    # Default: false
    extra-rules: true

  # goheader:

  goimports:
    # put imports beginning with prefix after 3rd-party packages;
    # it's a comma-separated list of prefixes
    local-prefixes: github.mheducation.com

  gomnd:
    # List of enabled checks, see https://github.com/tommy-muehle/go-mnd/#checks
    # for description. Default: ["argument", "case", "condition", "operation",
    # "return", "assign"]
    checks:
      - argument
      - case
      - condition
      - operation
      - return
      - assign

    # List of numbers to exclude from analysis. The numbers should be written as
    # string. Values always ignored: "1", "1.0", "0" and "0.0" Default: []
    ignored-numbers:
      - '0666'
      - '0755'

    # List of file patterns to exclude from analysis.
    # Values always ignored: `.+_test.go`
    # Default: []
    # ignored-files:
    #   - 'magic1_.*.go'

    # List of function patterns to exclude from analysis.
    # Values always ignored: `time.Date`
    # Default: []
    # ignored-functions:
    #   - 'math.*'
    #   - 'http.StatusText'

    # gomoddirectives:
    #   # Allow local `replace` directives.
    #   # Default: false
    #   replace-local: false

    # List of allowed `replace` directives.
    # Default: []
    # replace-allow-list:
    #   - launchpad.net/gocheck

    # Allow to not explain why the version has been retracted in the `retract`
    # directives.
    # Default: false
    # retract-allow-no-explanation: false

    # Forbid the use of the `exclude` directives.
    # Default: false
    exclude-forbidden: false

  # goprintffuncname:

  gosec:
    # To select a subset of rules to run.
    # Available rules: https://github.com/securego/gosec#available-rules
    # Default: [] - means include all rules
    includes: []

    # To specify a set of rules to explicitly exclude.
    # Available rules: https://github.com/securego/gosec#available-rules
    # Default: []
    excludes: []

    # Exclude generated files
    # Default: false
    exclude-generated: true

    # Filter out the issues with a lower severity than the given value.
    # Valid options are: low, medium, high.
    # Default: low
    severity: low

    # Filter out the issues with a lower confidence than the given value.
    # Valid options are: low, medium, high.
    # Default: low
    confidence: low

    # Concurrency value.
    # Default: the number of logical CPUs usable by the current process.
    # concurrency: 12

    # To specify the configuration of rules.
    config:
      # Globals are applicable to all rules.
      global:
        # Define whether nosec issues are counted as finding or not.
        # Default: false
        show-ignored: false

        # Audit mode enables addition checks that for normal code analysis might
        # be too nosy.
        # Default: false
        audit: true

  # gosimple:

  govet:
    # report about shadowed variables
    check-shadowing: true

    # settings per analyzer
    # run `go tool vet help` to see all analyzers
    # run `go tool vet help printf` to see available settings for `printf` analyzer
    # fieldalignment?
    settings:
      asmdecl: {}
      assign: {}
      atomic: {}
      bools: {}
      buildtag: {}
      composites:
        whitelist: true
      copylocks: {}
      # errorsas: {}
      loopclosure: {}
      lostcancel: {}
      nilfunc: {}
      printf:
        funcs: true
      shift: {}
      stdmethods: {}
      structtag: {}
      unmarshal: {}
      unreachable: {}
      unsafeptr: {}
      unusedresult:
        funcs: true
        stringmethods: true

  # grouper:

  importas:
    # Do not allow unaliased imports of aliased packages.
    # Default: false
    no-unaliased: true

    # Do not allow non-required aliases.
    # Default: false
    no-extra-aliases: false

    # List of aliases
    # Default: []
    alias: []
      # # Using `servingv1` alias for `knative.dev/serving/pkg/apis/serving/v1` package.
      # - pkg: knative.dev/serving/pkg/apis/serving/v1
      #   alias: servingv1

      # # You can specify the package path by regular expression,
      # # and alias by regular expression expansion syntax like below.
      # # see https://github.com/julz/importas#use-regular-expression for details
      # - pkg: knative.dev/serving/pkg/apis/(\w+)/(v[\w\d]+)
      #   alias: $1$2

  # ineffassign:
  # ireturn:

  lll:
    # max line length, lines longer will be reported. Default is 120. '\t' is counted as 1 character
    # by default, and can be changed with the tab-width option
    line-length: 120
    # tab width in spaces. Default to 1.
    tab-width: 1

  maintidx:
    # Show functions with maintainability index lower than N. A high index indicates better
    # maintainability (it's kind of the opposite of complexity).
    # Default: 20
    under: 20

  makezero:
    # Allow only slices initialized with a length of zero.
    # Default: false
    always: false

  misspell:
    # Correct spellings using locale preferences for US or UK. Default is to use a neutral variety
    # of English. Setting locale to US will correct the British spelling of 'colour' to 'color'.
    locale: US
    # ignore-words:
    #   - someword

  nakedret:
    # make an issue if func has more lines of code than this setting and it has naked returns;
    # default is 30
    max-func-lines: 30

  nestif:
    min-complexity: 10

  # nilerr:

  nilnil:
    # Checks that there is no simultaneous return of `nil` error and an invalid value.
    # Default: ["ptr", "func", "iface", "map", "chan"]
    checked-types:
      - ptr
      - func
      - iface
      - map
      - chan

  nlreturn:
    # Size of the block (including return statement that is still "OK")
    # so no return split required.
    # Default: 1
    block-size: 2

  # noctx:
  # nolintlint:
  # paralleltest:
  # prealloc:
  # predeclared:
  # promlinter:
  # revive:
  # rowserrcheck:
  # sqlclosecheck:

  staticcheck:
    # Select the Go version to target.
    # Default: "1.13"
    go: '1.21'

    # https://staticcheck.io/docs/options#checks
    # https://staticcheck.io/docs/checks/
    # Default: ["*"]
    checks:
      - all

  stylecheck:
    # Select the Go version to target.
    # Default: 1.13
    go: '1.21'

    # https://staticcheck.io/docs/options#checks
    # https://staticcheck.io/docs/checks/
    # Default: ["*"]
    checks:
      - all
      - -ST1000
      - -ST1003
      - -ST1016
      - -ST1020
      - -ST1021
      - -ST1022

    # https://staticcheck.io/docs/options#initialisms
    initialisms:
      - ACL
      - API
      - ARN
      - ASCII
      - CPU
      - DB
      - DNS
      - EOF
      - GID
      - GUID
      - HTML
      - HTTP
      - HTTPS
      - ID
      - IP
      - JSON
      - RPC
      - SLA
      - SQL
      - SSH
      - TCP
      - TLS
      - TTL
      - UDP
      - UI
      - UID
      - URI
      - URL
      - UTF8
      - UUID
      - XML
      - XSS

    # https://staticcheck.io/docs/options#http_status_code_whitelist
    # Default: ["200", "400", "404", "500"]
    # http-status-code-whitelist: ["200", "400", "404", "500"]

  tagliatelle:
    # Check the struck tag name case.
    case:
      # Use the struct field name to check the name of the struct tag.
      # Default: false
      use-field-name: false

      # `camel` is used for `json` and `yaml` (can be overridden)
      # Default: {}
      rules:
        # Any struct tag type can be used.
        # Support string case: `camel`, `pascal`, `kebab`, `snake`, `goCamel`, `goPascal`,
        #   `goKebab`, `goSnake`, `upper`, `lower`
        avro: snake
        bson: camel
        ini: snake
        json: camel
        mapstructure: kebab
        toml: snake
        xml: camel
        yaml: camel

  # tenv:
  # testpackage:
  # thelper:
  # tparallel:
  # typecheck:
  # unconvert:

  unparam:
    # Inspect exported functions, default is false. Set to true if no external program/library
    # imports your code. XXX: if you enable this setting, unparam will report a lot of
    # false-positives in text editors: if it's called for subdir of a project it can't find external
    # interfaces. All text editor integrations with golangci-lint call it on a directory with the
    # changed file.
    check-exported: false

  unused:
    # treat code as a program (not a library) and report unused exported identifiers; default is
    # false. XXX: if you enable this setting, unused will report a lot of false-positives in text
    # editors: if it's called for subdir of a project it can't find funcs usages. All text editor
    # integrations with golangci-lint call it on a directory with the changed file.
    check-exported: true

  # varnamelen:
  # wastedassign:

  whitespace:
    multi-if: false # Enforces newlines (or comments) after every multi-line if statement
    multi-func: false # Enforces newlines (or comments) after every multi-line function signature

  wrapcheck:
    # An array of strings that specify substrings of signatures to ignore. If this set, it will
    # override the default set of ignored signatures. See
    # https://github.com/tomarrell/wrapcheck#configuration for more information. Default:
    # [".Errorf(", "errors.New(", "errors.Unwrap(", ".Wrap(", ".Wrapf(", ".WithMessage(",
    # ".WithMessagef(", ".WithStack("]
    ignoreSigs:
      - .Errorf(
      - errors.New(
      - errors.Unwrap(
      - .Wrap(
      - .Wrapf(
      - .WithMessage(
      - .WithMessagef(
      - .WithStack(

    # An array of strings that specify regular expressions of signatures to ignore.
    # Default: []
    ignoreSigRegexps:
      - \.New.*Error\(

    # An array of strings that specify globs of packages to ignore.
    # Default: []
    ignorePackageGlobs:
      - encoding/*
      - github.com/pkg/*

    # An array of strings that specify regular expressions of interfaces to ignore.
    # Default: []
    ignoreInterfaceRegexps: []
      # - ^(?i)c(?-i)ach(ing|e)

  wsl:
    # See https://github.com/bombsimon/wsl/blob/master/doc/configuration.md for documentation of
    # available settings. These are the defaults for `golangci-lint`.

    # Controls if you may cuddle assignments and anything without needing an empty line between them.
    # Default: false
    allow-assign-and-anything: false

    # Controls if you may cuddle assignments and calls without needing an empty line between them.
    # Default: true
    allow-assign-and-call: true

    # Controls if you're allowed to cuddle multiple declarations. This is false by default to
    # encourage you to group them in one var block. One major benefit with this is that if the
    # variables are assigned the assignments will be tabulated.
    # Default: false
    allow-cuddle-declarations: false

    # Controls if you may cuddle assignments even if they span over multiple lines.
    # Default: true
    allow-multiline-assign: true

    # This option allows whitespace after each comment group that begins a block.
    # Default: false
    allow-separated-leading-comment: false

    # Controls if blocks can end with comments. This is not encouraged sine it's usually code smell
    # but might be useful do improve understanding or learning purposes. To be allowed there must be
    # no whitespace between the comment and the last statement or the comment and the closing brace.
    # Default: false
    allow-trailing-comment: false

    # Can be set to force trailing newlines at the end of case blocks to improve readability. If the
    # number of lines (including comments) in a case block exceeds this number a linter error will
    # be yielded if the case does not end with a newline.
    # Default: 0
    force-case-trailing-whitespace: 0

    # Enforces that an `if` statement checking an error variable is cuddled with the line that
    # assigned that error variable.
    # Default: false
    force-err-cuddling: false

    # Enforces that an assignment which is actually a short declaration (using `:=`) is only allowed
    # to cuddle with other short declarations, and not plain assignments, blocks, etc. This rule
    # helps make declarations stand out by themselves, much the same as grouping var statement.
    # Default: false
    force-short-decl-cuddling: false

    # Controls if the checks for slice append should be "strict" in the sense that it will only
    # allow these assignments to be cuddled with variables being appended.
    # Default: true
    strict-append: true

issues:
  # List of regexps of issue texts to exclude, empty list by default. But independently from this
  # option we use default exclude patterns, it can be disabled by `exclude-use-default: false`. To
  # list all excluded by default patterns execute `golangci-lint run --help`
  exclude:
    - should have a package comment
    - declaration of "(err|ctx)" shadows declaration at
    - '`Println` arg list ends with redundant newline'
    - Println arg list ends with redundant newline
    - type jsonschema.Schema has no field or method ValidateBytes
    - declarations should never be cuddled
    - 'unnamedResult: consider giving a name to these results'

  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files.
    - linters:
        - lll
      source: lint:ignore_length

    - linters:
        - gosec
      source: lint:allow_666

    - linters:
        - gosec
      source: lint:allow_possible_insecure

    - linters:
        - unparam
      source: lint:allow_param

    - linters:
        - gomnd
      source: lint:allow_raw_number

    - text: 'commentedOutCode: may want to remove commented-out code'
      linters:
        - gocritic
      source: lint:allow_commented

    - linters:
        - nestif
      source: lint:allow_nesting

    - linters:
        - dupl
      source: lint:no_dupe

    - linters:
        - goerr113
      source: lint:allow_errorf

    - linters:
        - wrapcheck
      source: lint:allow_unwrapped_errors

    - text: (SA1019|G402)
      linters:
        - staticcheck
        - gosec
      source: lint:allow_tls_min_version

    - text: (returns interface)
      linters:
        - ireturn
      source: lint:allow_return_interface

    - text: (G101)
      linters:
        - gosec
      source: lint:not_a_secret

    - text: (G404)
      linters:
        - gosec
      source: lint:not_crypto

    - text: (error-strings)
      linters:
        - revive
      source: lint:allow_human_errors

    - text: (hugeParam)
      linters:
        - gocritic
      source: lint:allow_large_memory

    - linters:
        - tagliatelle
      source: lint:allow_format

    - text: (is unused)
      linters:
        - unused
      source: lint:allow_unused

    - text: (is a program, not an importable package)
      linters:
        - typecheck
      source: lint:allow_importable_program

    - text: (don't use `init` function)
      linters:
        - gochecknoinits
      source: lint:allow_init

    - text: (cuddle)
      linters:
        - wsl
      source: lint:allow_cuddle

  # Independently from option `exclude` we use default exclude patterns, it can be disabled by this
  # option. To list all excluded by default patterns execute `golangci-lint run --help`. Default
  # value for this option is true.
  exclude-use-default: false

  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-issues-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0

  # Show only new issues: if there are unstaged changes or untracked files, only those changes are
  # analyzed, else only changes in HEAD~ are analyzed. It's a super-useful option for integration of
  # golangci-lint into existing large codebase. It's not practical to fix all existing issues at the
  # moment of integration: much better don't allow issues in new code. Default is false.
  new: false
  # Show only new issues created after git revision `REV`
  # new-from-rev: REV
  # Show only new issues created in git patch with set file path.
  # new-from-patch: path/to/patch/file
