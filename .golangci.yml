---
# This file contains all available configuration options with their default
# values.

# options for analysis running
run:
  # The default concurrency value is the number of available CPU.
  # concurrency: 4

  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 1m

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1

  # include test files or not, default is true
  tests: true

  # list of build tags, all linters use it. Default is empty list.
  # build-tags: []

  # Which dirs to skip: issues from them won't be reported.
  # Can use regexp here: `generated.*`, regexp is applied on full path,
  # including the path prefix if one is set.
  # Default value is empty list,
  # but default dirs are skipped independently of this option's value (see skip-dirs-use-default).
  # "/" will be replaced by current OS file path separator to properly work on Windows.
  # skip-dirs: []

  # default is true. Enables skipping of directories: vendor$, third_party$,
  #   testdata$, examples$, Godeps$, builtin$
  skip-dirs-use-default: true

  # Which files to skip: they will be analyzed, but issues from them won't be reported.
  # Default value is empty list,
  # but there is no need to include all autogenerated files,
  # we confidently recognize autogenerated files.
  # If it's not please let us know.
  # "/" will be replaced by current OS file path separator to properly work on Windows.
  skip-files:
    - .*\.my\.go$
    - lib/bad.go

  # If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  #
  # Allowed values: readonly|vendor|mod
  # By default, it isn't set.
  modules-download-mode: readonly

  # Allow multiple parallel golangci-lint instances running.
  # If false (default) - golangci-lint acquires file lock on start.
  allow-parallel-runners: false

  # Define the Go version limit.
  # Mainly related to generics support since go1.18.
  # Default: use Go version from the go.mod file, fallback on the env var `GOVERSION`, fallback on 1.18
  # go: "1.21"

linters:
  # please, do not use `enable-all`: it's deprecated and will be removed soon.
  # inverted configuration with `enable-all` and `disable` is not scalable
  # during updates of golangci-lint
  disable-all: true
  enable:
    # - asasalint
    # - bidichk
    # - cyclop
    - decorder
    # - depguard
    - dogsled
    - dupl
    - dupword
    - errcheck
    - errchkjson
    - errorlint
    - exhaustive
    # - exhaustivestruct
    # - forbidigo
    - funlen
    # - ginkgolinter
    - gocognit
    - goconst
    - gocritic
    # - gocyclo
    # - godot
    - godox
    - gofmt
    # - gofumpt
    # - goheader
    - goimports
    # - golint # DEPRECATED
    - gomnd
    # - gomoddirectives
    # - gomodguard
    - gosec
    - gosimple
    # - gosmopolitan
    - govet
    # - grouper
    # - ifshort
    - importas
    - interfacebloat
    # - ireturn
    - lll
    # - loggercheck
    - maintidx
    - makezero
    # - maligned # DEPRECATED
    - misspell
    # - musttag
    - nakedret
    - nestif
    - nilnil
    - nlreturn
    # - nolintlint
    - nonamedreturns
    - paralleltest
    # - prealloc
    # - predeclared
    # - promlinter
    # - reassign
    # - revive: @TODO: Review and enable
    # - rowserrcheck
    - sloglint
    - staticcheck
    - stylecheck
    - tagalign
    - tagliatelle
    # - tenv
    # - testifylint
    # - testpackage
    - thelper
    - unparam
    - unused
    - usestdlibvars
    # - varcheck # DEPRECATED
    # - varnamelen
    - whitespace
    - wrapcheck
    - wsl

# output configuration options
output:
  # Format: colored-line-number|line-number|json|colored-tab|tab|checkstyle|code-climate|junit-xml|github-actions|teamcity
  #
  # Multiple can be specified by separating them by comma, output can be provided
  # for each of them by separating format name and path by colon symbol.
  # Output path can be either `stdout`, `stderr` or path to the file to write to.
  # Example: "checkstyle:report.xml,json:stdout,colored-line-number"
  #
  # Default: colored-line-number
  format: colored-line-number

  # Print lines of code with issue.
  # Default: true
  print-issued-lines: true

  # Print linter name in the end of issue text.
  # Default: true
  print-linter-name: true

  # Make issues output unique by line.
  # Default: true
  uniq-by-line: true

  # Add a prefix to the output file references.
  # Default is no prefix.
  path-prefix: ''

  # Sort results by: filepath, line and column.
  sort-results: true

# all available settings of specific linters
linters-settings:
  # asasalint:
  # bidichk:
  # cyclop:

  decorder:
    # Required order of `type`, `const`, `var` and `func` declarations inside a file.
    # Default: types before constants before variables before functions.
    dec-order:
      - const
      - var
      - type
      - func

    # If true, order of declarations is not checked at all.
    # Default: true (disabled)
    disable-dec-order-check: false

    # If true, `init` func can be anywhere in file (does not have to be declared before all other functions).
    # Default: true (disabled)
    disable-init-func-first-check: false

    # If true, multiple global `type`, `const` and `var` declarations are allowed.
    # Default: true (disabled)
    disable-dec-num-check: false

  # depguard:

  dogsled:
    # checks assignments with too many blank identifiers; default is 2
    max-blank-identifiers: 2

  dupl:
    # tokens count to trigger issue, 150 by default
    threshold: 100

  dupword:
    # Keywords for detecting duplicate words.
    # If this list is not empty, only the words defined in this list will be detected.
    # Default: []
    keywords:
      - a
      - an
      - and
      - of
      - or
      - the
      - this

    # Keywords used to ignore detection.
    # Default: []
    # ignore: []

  errcheck:
    # report about not checking of errors in type assetions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: true

    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    # default is false: such cases aren't reported by default.
    check-blank: false

  errchkjson:
    # With check-error-free-encoding set to true, errchkjson does warn about
    # errors from json encoding functions that are safe to be ignored, because
    # they are not possible to happen.
    #
    # if check-error-free-encoding is set to true and errcheck linter is
    # enabled, it is recommended to add the following exceptions to prevent from
    # false positives:
    #
    #     linters-settings:
    #       errcheck:
    #         exclude-functions:
    #           - encoding/json.Marshal
    #           - encoding/json.MarshalIndent
    #
    # Default: false
    check-error-free-encoding: false

    # Issue on struct encoding that doesn't have exported fields.
    # Default: false
    report-no-exported: false

  errorlint:
    # Check whether fmt.Errorf uses the %w verb for formatting errors.
    # See the https://github.com/polyfloyd/go-errorlint for caveats.
    # Default: true
    errorf: true

    # Check for plain type assertions and type switches.
    # Default: true
    asserts: true

    # Check for plain error comparisons.
    # Default: true
    comparison: true

  exhaustive:
    # Program elements to check for exhaustiveness.
    # Default: [ switch ]
    check:
      - switch
      - map

    # Check switch statements in generated files also.
    # Default: false
    check-generated: true

    # Presence of "default" case in switch statements satisfies exhaustiveness,
    # even if all enum members are not listed.
    # Default: false
    default-signifies-exhaustive: true

    # Enum members matching the supplied regex do not have to be listed in
    # switch statements to satisfy exhaustiveness.
    # Default: ""
    # ignore-enum-members: "Example.+"

    # Enum types matching the supplied regex do not have to be listed in
    # switch statements to satisfy exhaustiveness.
    # Default: ""
    # ignore-enum-types: "Example.+"

    # Consider enums only in package scopes, not in inner scopes.
    # Default: false
    package-scope-only: false

    # Only run exhaustive check on switches with "//exhaustive:enforce" comment.
    # Default: false
    explicit-exhaustive-switch: false

    # Only run exhaustive check on map literals with "//exhaustive:enforce" comment.
    # Default: false
    explicit-exhaustive-map: false

  # exhaustivestruct:

  exhaustruct:
    # List of regular expressions to match struct packages and names.
    # If this list is empty, all structs are tested.
    # Default: []
    # include: []

    # List of regular expressions to exclude struct packages and names from check.
    # Default: []
    # exclude: []

  # forbidigo:

  funlen:
    # Checks the number of lines in a function.
    # If lower than 0, disable the check.
    # Default: 60
    lines: -1

    # Checks the number of statements in a function.
    # If lower than 0, disable the check.
    # Default: 40
    statements: -1

    # Ignore comments when counting lines.
    # Default false
    ignore-comments: true

  # ginkgolinter:

  gocognit:
    # Minimal code complexity to report.
    # Default: 30 (but we recommend 10-20)
    min-complexity: 20

  goconst:
    # Minimal length of string constant.
    # Default: 3
    min-len: 80

    # Minimum occurrences of constant string count to trigger issue.
    # Default: 3
    min-occurrences: 3

    # Ignore test files.
    # Default: false
    ignore-tests: false

    # Look for existing constants matching the values.
    # Default: true
    match-constant: true

    # Search also for duplicated numbers.
    # Default: false
    numbers: false

    # Minimum value, only works with goconst.numbers
    # Default: 3
    # min: 3

    # Maximum value, only works with goconst.numbers
    # Default: 3
    # max: 3

    # Ignore when constant is not used as function argument.
    # Default: true
    ignore-calls: true

  gocritic:
    # Which checks should be enabled; can't be combined with 'disabled-checks'.
    # See https://go-critic.github.io/overview#checks-overview.
    # To check which checks are enabled run `GL_DEBUG=gocritic golangci-lint run`.
    # By default, list of stable checks is used.
    # enabled-checks:

    # Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint run` to see all tags and checks.
    # See https://github.com/go-critic/go-critic#usage -> section "Tags".
    # Default: []
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style

    disabled-tags:
      - badLock
      - badRegexp
      - badSyncOnceFunc
      - docStub
      - whyNoLint

    # Settings passed to gocritic.
    # The settings key is the name of a supported gocritic checker.
    # The list of supported checkers can be find in https://go-critic.github.io/overview.
    settings:
      captLocal:
        # Whether to restrict checker to params only.
        # Default: true
        paramsOnly: true

      elseif:
        # Whether to skip balanced if-else pairs.
        # Default: true
        skipBalanced: true

      hugeParam:
        # Size in bytes that makes the warning trigger.
        # Default: 80
        sizeThreshold: 80

      nestingReduce:
        # Min number of statements inside a branch to trigger a warning.
        # Default: 5
        bodyWidth: 5

      rangeExprCopy:
        # Size in bytes that makes the warning trigger.
        # Default: 512
        sizeThreshold: 512

        # Whether to check test functions
        # Default: true
        skipTestFuncs: true

      rangeValCopy:
        # Size in bytes that makes the warning trigger.
        # Default: 128
        sizeThreshold: 128

        # Whether to check test functions.
        # Default: true
        skipTestFuncs: true

      ruleguard:
        # Enable debug to identify which 'Where' condition was rejected.
        # The value of the parameter is the name of a function in a ruleguard file.
        #
        # When a rule is evaluated:
        # If:
        #   The Match() clause is accepted; and
        #   One of the conditions in the Where() clause is rejected,
        # Then:
        #   ruleguard prints the specific Where() condition that was rejected.
        #
        # The flag is passed to the ruleguard 'debug-group' argument.
        # Default: ""
        # debug: ''

        # Determines the behavior when an error occurs while parsing ruleguard files.
        # If flag is not set, log error and skip rule files that contain an error.
        # If flag is set, the value must be a comma-separated list of error conditions.
        # - 'all':    fail on all errors.
        # - 'import': ruleguard rule imports a package that cannot be found.
        # - 'dsl':    gorule file does not comply with the ruleguard DSL.
        # Default: ""
        # failOn: ''

        # Comma-separated list of file paths containing ruleguard rules.
        # If a path is relative, it is relative to the directory where the golangci-lint command is executed.
        # The special '${configDir}' variable is substituted with the absolute directory containing the golangci config file.
        # Glob patterns such as 'rules-*.go' may be specified.
        # Default: ""
        # rules: ''

        # Comma-separated list of enabled groups or skip empty to enable everything.
        # Tags can be defined with # character prefix.
        # Default: "<all>"
        # enable: "myGroupName,#myTagName"

        # Comma-separated list of disabled groups or skip empty to enable everything.
        # Tags can be defined with # character prefix.
        # Default: ""
        # disable: "myGroupName,#myTagName"

      tooManyResultsChecker:
        # Maximum number of results.
        # Default: 5
        maxResults: 20

      truncateCmp:
        # Whether to skip int/uint/uintptr types.
        # Default: true
        skipArchDependent: true

      underef:
        # Whether to skip (*x).method() calls where x is a pointer receiver.
        # Default: true
        skipRecvDeref: true

      unnamedResult:
        # Whether to check exported functions.
        # Default: false
        checkExported: false

  # gocyclo:
  # godot:

  godox:
    # report any comments starting with keywords, this is useful for TODO or
    # FIXME comments that might be left in the code accidentally and should be
    # resolved before merging
    keywords:
      - BUG
      - FIXME
      - HACK
      - NOTE
      - OPTIMIZE
      - TODO
      - '@TODO'

  gofmt:
    # Simplify code: gofmt with `-s` option.
    # Default: true
    simplify: true

    # Apply the rewrite rules to the source before reformatting.
    # https://pkg.go.dev/cmd/gofmt
    # Default: []
    rewrite-rules:
      - pattern: interface{}
        replacement: any
      - pattern: a[b:len(a)]
        replacement: a[b:]

  # gofumpt:
  #   # Module path which contains the source code being formatted.
  #   # Default: ""
  #   # module-path: github.com/org/project

  #   # Choose whether to use the extra rules.
  #   # Default: false
  #   extra-rules: true

  # goheader:

  goimports:
    # A comma-separated list of prefixes, which, if set, checks import paths
    # with the given prefixes are grouped after 3rd-party packages.
    # Default: ""
    # local-prefixes: github.mycompany.com

  gomnd:
    # List of enabled checks, see https://github.com/tommy-muehle/go-mnd/#checks for description.
    # Default: ["argument", "case", "condition", "operation", "return", "assign"]
    checks:
      - argument
      - case
      - condition
      - operation
      - return
      - assign

    # List of numbers to exclude from analysis.
    # The numbers should be written as string.
    # Values always ignored: "1", "1.0", "0" and "0.0"
    # Default: []
    ignored-numbers:
      - '0666'
      - '0755'

    # List of file patterns to exclude from analysis.
    # Values always ignored: `.+_test.go`
    # Default: []
    # ignored-files:
    #   - 'magic1_.+\.go$'

    # List of function patterns to exclude from analysis.
    # Following functions are always ignored: `time.Date`,
    # `strconv.FormatInt`, `strconv.FormatUint`, `strconv.FormatFloat`,
    # `strconv.ParseInt`, `strconv.ParseUint`, `strconv.ParseFloat`.
    # Default: []
    # ignored-functions:
    #   - '^math\.'
    #   - '^http\.StatusText$'

  # gomoddirectives:
  # gomodguard:

  gosimple:
    # Sxxxx checks in https://staticcheck.io/docs/configuration/options/#checks
    # Default: ["*"]
    checks: ['*']

  gosec:
    # To select a subset of rules to run.
    # Available rules: https://github.com/securego/gosec#available-rules
    # Default: [] - means include all rules
    # includes:

    # To specify a set of rules to explicitly exclude.
    # Available rules: https://github.com/securego/gosec#available-rules
    # Default: []
    # excludes:

    # Exclude generated files
    # Default: false
    exclude-generated: true

    # Filter out the issues with a lower severity than the given value.
    # Valid options are: low, medium, high.
    # Default: low
    severity: low

    # Filter out the issues with a lower confidence than the given value.
    # Valid options are: low, medium, high.
    # Default: low
    confidence: medium

    # Concurrency value.
    # Default: the number of logical CPUs usable by the current process.
    # concurrency: 12

    # To specify the configuration of rules.
    config:
      # Globals are applicable to all rules.
      global:
        # If true, ignore #nosec in comments (and an alternative as well).
        # Default: false
        nosec: false

        # Add an alternative comment prefix to #nosec (both will work at the same time).
        # Default: ""
        # "#nosec": "#my-custom-nosec"

        # Define whether nosec issues are counted as finding or not.
        # Default: false
        show-ignored: false

        # Audit mode enables addition checks that for normal code analysis might be too nosy.
        # Default: false
        audit: true

      G101:
        # Regexp pattern for variables and constants to find.
        # Default: "(?i)passwd|pass|password|pwd|secret|token|pw|apiKey|bearer|cred"
        # pattern: "(?i)example"

        # If true, complain about all cases (even with low entropy).
        # Default: false
        ignore_entropy: false

        # Maximum allowed entropy of the string.
        # Default: "80.0"
        entropy_threshold: '80.0'

        # Maximum allowed value of entropy/string length.
        # Is taken into account if entropy >= entropy_threshold/2.
        # Default: "3.0"
        per_char_threshold: '3.0'

        # Calculate entropy for first N chars of the string.
        # Default: "16"
        truncate: '16'

      # Additional functions to ignore while checking unhandled errors.
      # Following functions always ignored:
      #   bytes.Buffer:
      #     - Write
      #     - WriteByte
      #     - WriteRune
      #     - WriteString
      #   fmt:
      #     - Print
      #     - Printf
      #     - Println
      #     - Fprint
      #     - Fprintf
      #     - Fprintln
      #   strings.Builder:
      #     - Write
      #     - WriteByte
      #     - WriteRune
      #     - WriteString
      #   io.PipeWriter:
      #     - CloseWithError
      #   hash.Hash:
      #     - Write
      #   os:
      #     - Unsetenv
      # Default: {}
      G104:
        fmt:
          - Fscanf

      G111:
        # Regexp pattern to find potential directory traversal.
        # Default: "http\\.Dir\\(\"\\/\"\\)|http\\.Dir\\('\\/'\\)"
        pattern: custom\.Dir\(\)

      # Maximum allowed permissions mode for os.Mkdir and os.MkdirAll
      # Default: "0750"
      G301: '0750'

      # Maximum allowed permissions mode for os.OpenFile and os.Chmod
      # Default: "0600"
      G302: '0600'

      # Maximum allowed permissions mode for os.WriteFile and ioutil.WriteFile
      # Default: "0666"
      G306: '0666'

  # gosmopolitan:

  govet:
    # report about shadowed variables
    check-shadowing: true

    # Enable analyzers by name.
    # (in addition to default:
    #   appends, asmdecl, assign, atomic, bools, buildtag, cgocall, composites, copylocks, defers, directive, errorsas,
    #   framepointer, httpresponse, ifaceassert, loopclosure, lostcancel, nilfunc, printf, shift, sigchanyzer, slog,
    #   stdmethods, stringintconv, structtag, testinggoroutine, tests, timeformat, unmarshal, unreachable, unsafeptr,
    #   unusedresult
    # ).
    # Run `go tool vet help` to see all analyzers.
    # Default: []
    enable:
      - appends
      - asmdecl
      - assign
      - atomic
      - atomicalign
      - bools
      - buildtag
      - cgocall
      - composites
      - copylocks
      - deepequalerrors
      - defers
      - directive
      - errorsas
      - fieldalignment
      - findcall
      - framepointer
      - httpresponse
      - ifaceassert
      - loopclosure
      - lostcancel
      - nilfunc
      - nilness
      - printf
      - reflectvaluecompare
      - shadow
      - shift
      - sigchanyzer
      - slog
      - sortslice
      - stdmethods
      - stringintconv
      - structtag
      - testinggoroutine
      - tests
      - unmarshal
      - unreachable
      - unsafeptr
      - unusedresult
      - unusedwrite

    # settings per analyzer
    # run `go tool vet help` to see all analyzers
    # run `go tool vet help printf` to see available settings for `printf` analyzer
    # fieldalignment?
    settings:
      asmdecl: {}
      assign: {}
      atomic: {}
      bools: {}
      buildtag: {}
      composites:
        whitelist: true
      copylocks: {}
      # errorsas: {}
      loopclosure: {}
      lostcancel: {}
      nilfunc: {}
      printf:
        funcs: true
      shift: {}
      stdmethods: {}
      structtag: {}
      unmarshal: {}
      unreachable: {}
      unsafeptr: {}
      unusedresult:
        funcs: true
        stringmethods: true

  # grouper:
  # ifshort:

  importas:
    # Do not allow unaliased imports of aliased packages.
    # Default: false
    no-unaliased: true

    # Do not allow non-required aliases.
    # Default: false
    no-extra-aliases: false

    # List of aliases
    # Default: []
    # alias:
    #   []
    # # Using `servingv1` alias for `knative.dev/serving/pkg/apis/serving/v1` package.
    # - pkg: knative.dev/serving/pkg/apis/serving/v1
    #   alias: servingv1

    # # You can specify the package path by regular expression,
    # # and alias by regular expression expansion syntax like below.
    # # see https://github.com/julz/importas#use-regular-expression for details
    # - pkg: knative.dev/serving/pkg/apis/(\w+)/(v[\w\d]+)
    #   alias: $1$2

  interfacebloat:
    # The maximum number of methods allowed for an interface.
    # Default: 10
    max: 10

  # ireturn:

  lll:
    # max line length, lines longer will be reported. Default is 120. '\t' is counted as 1 character
    # by default, and can be changed with the tab-width option
    line-length: 120

    # tab width in spaces. Default to 1.
    tab-width: 1

  # loggercheck:

  maintidx:
    # Show functions with maintainability index lower than N. A high index indicates better
    # maintainability (it's kind of the opposite of complexity).
    # Default: 20
    under: 20

  makezero:
    # Allow only slices initialized with a length of zero.
    # Default: false
    always: false

  misspell:
    # Correct spellings using locale preferences for US or UK.
    # Setting locale to US will correct the British spelling of 'colour' to 'color'.
    # Default is to use a neutral variety of English.
    locale: US

    # Default: []
    # ignore-words:
    #   - someword

  # musttag:

  nakedret:
    # make an issue if func has more lines of code than this setting and it has naked returns;
    # default is 30
    max-func-lines: 30

  nestif:
    min-complexity: 10

  nilnil:
    # Checks that there is no simultaneous return of `nil` error and an invalid value.
    # Default: ["ptr", "func", "iface", "map", "chan"]
    checked-types:
      - ptr
      - func
      - iface
      - map
      - chan

  nlreturn:
    # Size of the block (including return statement that is still "OK")
    # so no return split required.
    # Default: 1
    block-size: 2

  # nolintlint:

  nonamedreturns:
    # Report named error if it is assigned inside defer.
    # Default: false
    report-error-in-defer: false

  paralleltest:
    # Ignore missing calls to `t.Parallel()` and only report incorrect uses of it.
    # Default: false
    ignore-missing: true

    # Ignore missing calls to `t.Parallel()` in subtests. Top-level tests are
    # still required to have `t.Parallel`, but subtests are allowed to skip it.
    # Default: false
    ignore-missing-subtests: true

  # prealloc:
  # predeclared:
  # promlinter:
  # reassign:
  # revive: @TODO: Review and enable.
  # rowserrcheck:

  sloglint:
    # See also https://github.com/go-simpler/sloggen

    # Enforce using key-value pairs only (incompatible with attr-only).
    # Default: false
    kv-only: true

    # Enforce using attributes only (incompatible with kv-only).
    # Default: false
    attr-only: false

    # Enforce using constants instead of raw keys.
    # Default: false
    no-raw-keys: true

    # Enforce putting arguments on separate lines.
    # Default: false
    args-on-sep-lines: false

  staticcheck:
    # https://staticcheck.io/docs/options#checks
    # https://staticcheck.io/docs/checks/
    # Default: ["*"]
    checks: ['*']

  stylecheck:
    # STxxxx checks in https://staticcheck.io/docs/configuration/options/#checks
    # Default: ["*"]
    checks: ['*']

    # https://staticcheck.io/docs/configuration/options/#dot_import_whitelist
    # Default: ["github.com/mmcloughlin/avo/build", "github.com/mmcloughlin/avo/operand", "github.com/mmcloughlin/avo/reg"]
    # dot-import-whitelist:
    #   - fmt

    # https://staticcheck.io/docs/configuration/options/#initialisms
    # Default: ["ACL", "API", "ASCII", "CPU", "CSS", "DNS", "EOF", "GUID", "HTML", "HTTP", "HTTPS", "ID", "IP", "JSON", "QPS", "RAM", "RPC", "SLA", "SMTP", "SQL", "SSH", "TCP", "TLS", "TTL", "UDP", "UI", "GID", "UID", "UUID", "URI", "URL", "UTF8", "VM", "XML", "XMPP", "XSRF", "XSS", "SIP", "RTP", "AMQP", "DB", "TS"]
    # initialisms:

    # https://staticcheck.io/docs/configuration/options/#http_status_code_whitelist
    # Default: ["200", "400", "404", "500"]
    # http-status-code-whitelist: [ "200", "400", "404", "500" ]

  tagalign:
    # Align and sort can be used together or separately.
    #
    # Whether enable align. If true, the struct tags will be aligned.
    # eg:
    # type FooBar struct {
    #     Bar    string `json:"bar" validate:"required"`
    #     FooFoo int8   `json:"foo_foo" validate:"required"`
    # }
    # will be formatted to:
    # type FooBar struct {
    #     Bar    string `json:"bar"     validate:"required"`
    #     FooFoo int8   `json:"foo_foo" validate:"required"`
    # }
    # Default: true.
    align: true

    # Whether enable tags sort.
    # If true, the tags will be sorted by name in ascending order.
    # eg: `xml:"bar" json:"bar" validate:"required"` -> `json:"bar" validate:"required" xml:"bar"`
    # Default: true
    sort: true

    # Specify the order of tags, the other tags will be sorted by name.
    # This option will be ignored if `sort` is false.
    # Default: []
    # order:

    # Whether enable strict style.
    # In this style, the tags will be sorted and aligned in the dictionary order,
    # and the tags with the same name will be aligned together.
    # Note: This option will be ignored if 'align' or 'sort' is false.
    # Default: false
    strict: true

  tagliatelle:
    # Check the struct tag name case.
    case:
      # Use the struct field name to check the name of the struct tag.
      # Default: false
      use-field-name: false

      # `camel` is used for `json` and `yaml`, and `header` is used for `header` (can be overridden)
      # Default: {}
      rules:
        # Any struct tag type can be used.
        # Support string case: `camel`, `pascal`, `kebab`, `snake`, `upperSnake`, `goCamel`, `goPascal`, `goKebab`, `goSnake`, `upper`, `lower`, `header`
        avro: snake
        bson: camel
        env: upperSnake
        envconfig: upperSnake
        ini: snake
        json: camel
        mapstructure: kebab
        toml: snake
        xml: camel
        yaml: camel

  # tenv:
  # testifylint:
  # testpackage:

  thelper:
    test:
      # Check *testing.T is first param (or after context.Context) of helper function.
      # Default: true
      first: true

      # Check *testing.T param has name t.
      # Default: true
      name: true

      # Check t.Helper() begins helper function.
      # Default: true
      begin: true

    benchmark:
      # Check *testing.B is first param (or after context.Context) of helper function.
      # Default: true
      first: true

      # Check *testing.B param has name b.
      # Default: true
      name: true

      # Check b.Helper() begins helper function.
      # Default: true
      begin: true

    tb:
      # Check *testing.TB is first param (or after context.Context) of helper function.
      # Default: true
      first: true

      # Check *testing.TB param has name tb.
      # Default: true
      name: true

      # Check tb.Helper() begins helper function.
      # Default: true
      begin: true

    fuzz:
      # Check *testing.F is first param (or after context.Context) of helper function.
      # Default: true
      first: true

      # Check *testing.F param has name f.
      # Default: true
      name: true

      # Check f.Helper() begins helper function.
      # Default: true
      begin: true

  usestdlibvars:
    # Suggest the use of http.MethodXX.
    # Default: true
    http-method: true

    # Suggest the use of http.StatusXX.
    # Default: true
    http-status-code: true

    # Suggest the use of time.Weekday.String().
    # Default: true
    time-weekday: true

    # Suggest the use of time.Month.String().
    # Default: false
    time-month: false

    # Suggest the use of time.Layout.
    # Default: false
    time-layout: false

    # Suggest the use of crypto.Hash.String().
    # Default: false
    crypto-hash: false

    # Suggest the use of rpc.DefaultXXPath.
    # Default: false
    default-rpc-path: false

    # Suggest the use of sql.LevelXX.String().
    # Default: false
    sql-isolation-level: false

    # Suggest the use of tls.SignatureScheme.String().
    # Default: false
    tls-signature-scheme: false

    # Suggest the use of constant.Kind.String().
    # Default: false
    constant-kind: false

  unparam:
    # Inspect exported functions.
    #
    # Set to true if no external program/library imports your code.
    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    #
    # Default: false
    check-exported: false

  unused:
    # Mark all struct fields that have been written to as used.
    # Default: true
    field-writes-are-uses: true

    # Treat IncDec statement (e.g. `i++` or `i--`) as both read and write operation instead of just write.
    # Default: false
    post-statements-are-reads: false

    # Mark all exported identifiers as used.
    # Default: true
    exported-is-used: true

    # Mark all exported fields as used.
    # default: true
    exported-fields-are-used: true

    # Mark all function parameters as used.
    # default: true
    parameters-are-used: true

    # Mark all local variables as used.
    # default: true
    local-variables-are-used: true

    # Mark all identifiers inside generated files as used.
    # Default: true
    generated-is-used: true

  # varnamelen:

  whitespace:
    # Enforces newlines (or comments) after every multi-line if statement.
    # Default: false
    multi-if: false

    # Enforces newlines (or comments) after every multi-line function signature.
    # Default: false
    multi-func: false

  wrapcheck:
    # An array of strings that specify substrings of signatures to ignore.
    # If this set, it will override the default set of ignored signatures.
    # See https://github.com/tomarrell/wrapcheck#configuration for more information.
    # Default: [".Errorf(", "errors.New(", "errors.Unwrap(", ".Wrap(", ".Wrapf(", ".WithMessage(", ".WithMessagef(", ".WithStack("]
    ignoreSigs:
      - .Errorf(
      - errors.New(
      - errors.Unwrap(
      - .Wrap(
      - .Wrapf(
      - .WithMessage(
      - .WithMessagef(
      - .WithStack(

    # An array of strings that specify regular expressions of signatures to ignore.
    # Default: []
    # ignoreSigRegexps:
    #   - \.New.*Error\(

    # An array of strings that specify globs of packages to ignore.
    # Default: []
    # ignorePackageGlobs:
    #   - encoding/*
    #   - github.com/pkg/*

    # An array of strings that specify regular expressions of interfaces to ignore.
    # Default: []
    # ignoreInterfaceRegexps:
    #   - ^(?i)c(?-i)ach(ing|e)

  wsl:
    # See https://github.com/bombsimon/wsl/blob/master/doc/configuration.md for documentation of available settings.
    # These are the defaults for `golangci-lint`.

    # Allows assignments to be cuddled with anything.
    allow-assign-and-anything: false

    # Allows assignments to be cuddled with variables used in calls on
    # line above and calls to be cuddled with assignments of variables
    # used in call on line above.
    allow-assign-and-call: true

    # Allow multiple var/declaration statements to be cuddled.
    allow-cuddle-declarations: false

    # A list of call idents that everything can be cuddled with.
    # Defaults to calls looking like locks.
    allow-cuddle-with-calls: [Lock, RLock]

    # AllowCuddleWithRHS is a list of right hand side variables that is allowed
    # to be cuddled with anything. Defaults to assignments or calls looking
    # like unlocks.
    allow-cuddle-with-rhs: [Unlock, RUnlock]

    # Allows cuddling to assignments even if they span over multiple lines.
    allow-multiline-assign: true

    # Allow multiple comments in the beginning of a block separated with newline.
    allow-separated-leading-comment: true

    # Allow blocks to end with comments.
    allow-trailing-comment: false

    # When force-err-cuddling is enabled this is a list of names
    # used for error variables to check for in the conditional.
    error-variable-names: [err]

    # If the number of lines in a case block is equal to or lager than this
    # number, the case *must* end white a newline.
    force-case-trailing-whitespace: 0

    # Causes an error when an If statement that checks an error variable doesn't
    # cuddle with the assignment of that variable.
    force-err-cuddling: false

    # Causes an error if a short declaration (:=) cuddles with anything other than
    # another short declaration.
    # This logic overrides force-err-cuddling among others.
    force-short-decl-cuddling: false

    # Do strict checking when assigning from append (x = append(x, y)). If
    # this is set to true - the append call must append either a variable
    # assigned, called or used on the line above.
    strict-append: true

issues:
  # List of regexps of issue texts to exclude, empty list by default. But independently from this
  # option we use default exclude patterns, it can be disabled by `exclude-use-default: false`. To
  # list all excluded by default patterns execute `golangci-lint run --help`
  # exclude:

  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files.
    - linters:
        - lll
      source: lint:ignore_length

    - linters:
        - gosec
      source: lint:allow_666

    - linters:
        - gosec
      source: lint:allow_possible_insecure

    - linters:
        - unparam
      source: lint:allow_param

    - linters:
        - gomnd
      source: lint:allow_raw_number

    - text: 'commentedOutCode: may want to remove commented-out code'
      linters:
        - gocritic
      source: lint:allow_commented

    - linters:
        - nestif
      source: lint:allow_nesting

    - linters:
        - dupl
      source: lint:no_dupe

    - linters:
        - goerr113
      source: lint:allow_errorf

    - linters:
        - wrapcheck
      source: lint:allow_unwrapped_errors

    - text: (SA1019|G402)
      linters:
        - staticcheck
        - gosec
      source: lint:allow_tls_min_version

    - text: (returns interface)
      linters:
        - ireturn
      source: lint:allow_return_interface

    - text: (G101)
      linters:
        - gosec
      source: lint:not_a_secret

    - text: (G104)
      linters:
        - gosec
      source: lint:allow_unhandled

    - text: (G404)
      linters:
        - gosec
      source: lint:not_crypto

    - text: (error-strings)
      linters:
        - revive
      source: lint:allow_human_errors

    - text: (hugeParam)
      linters:
        - gocritic
      source: lint:allow_large_memory

    - linters:
        - tagliatelle
        - gofumpt
      source: lint:allow_format

    - text: (is unused)
      linters:
        - unused
      source: lint:allow_unused

    - text: (is a program, not an importable package)
      linters:
        - typecheck
      source: lint:allow_importable_program

    - text: (don't use `init` function)
      linters:
        - gochecknoinits
      source: lint:allow_init

    - text: (cuddle)
      linters:
        - wsl
      source: lint:allow_cuddle

    - text: (ST1000)
      linters:
        - stylecheck
      source: lint:allow_no_pkg_comment

  # If set to true exclude and exclude-rules regular expressions become case-sensitive.
  # Default: false
  exclude-case-sensitive: false

  # Independently from option `exclude` we use default exclude patterns, it can be disabled by this
  # option. To list all excluded by default patterns execute `golangci-lint run --help`. Default
  # value for this option is true.
  exclude-use-default: false

  # Fix found issues (if it's supported by the linter).
  fix: false

  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-issues-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0

  # Show only new issues: if there are unstaged changes or untracked files, only those changes are
  # analyzed, else only changes in HEAD~ are analyzed. It's a super-useful option for integration of
  # golangci-lint into existing large codebase. It's not practical to fix all existing issues at the
  # moment of integration: much better don't allow issues in new code. Default is false.
  new: false

  # Show only new issues created after git revision `REV`
  # new-from-rev: REV

  # Show only new issues created in git patch with set file path.
  # new-from-patch: path/to/patch/file

severity:
  # Set the default severity for issues.
  #
  # If severity rules are defined and the issues do not match or no severity is provided to the rule
  # this will be the default severity applied.
  # Severities should match the supported severity names of the selected out format.
  # - Code climate: https://docs.codeclimate.com/docs/issues#issue-severity
  # - Checkstyle: https://checkstyle.sourceforge.io/property_types.html#SeverityLevel
  # - GitHub: https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-error-message
  # - TeamCity: https://www.jetbrains.com/help/teamcity/service-messages.html#Inspection+Instance
  #
  # Default value is an empty string.
  # default-severity: error

  # If set to true `severity-rules` regular expressions become case-sensitive.
  # Default: false
  case-sensitive: false

  # When a list of severity rules are provided, severity information will be added to lint issues.
  # Severity rules have the same filtering capability as exclude rules
  # except you are allowed to specify one matcher per severity rule.
  # Only affects out formats that support setting severity information.
  #
  # Default: []
  # rules:
  #   - linters:
  #       - dupl
  #     severity: info
