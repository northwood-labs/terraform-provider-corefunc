# git-cliff ~ default configuration file
# https://git-cliff.org/docs/configuration
#
# Lines starting with "#" are comments.
# Configuration options are organized into tables and keys.
# See documentation for more information on available options.

[changelog]
# changelog header
header = """
# CHANGELOG

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com), adheres to
[Semantic Versioning](https://semver.org), and uses
[Conventional Commit](https://www.conventionalcommits.org) syntax.

"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version %}\
  ## {{ version | trim_start_matches(pat="v") }} — {{ timestamp | date(format="%Y-%m-%d") }}
  {% if previous.version %}\
    [Compare: {{ previous.version }} → {{ version }}](@REPO/compare/{{ previous.version }}..{{ version }})
  {% endif %}\
{% else %}\
  ## Unreleased
  {% if previous.version %}\
    [Compare: {{ previous.version }} → `HEAD`](@REPO/compare/{{ previous.version }}..HEAD)
  {% endif %}\
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
  ### {{ group | upper_first }}
  {% for commit in commits %}
    * {% if commit.breaking %}**[BC BREAK]** {% endif %}\
    [`{{ commit.id | truncate(length=7, end="") }}`](@REPO/commit/{{ commit.id }}): {% if commit.scope %}\
    **{{ commit.scope }}**: {% endif %}{{ commit.message | upper_first | trim_end }}\
    {% if commit.author.name != "Ryan Parman" %} ({{ commit.author.name }}){% endif %}\
  {% endfor %}
{% endfor %}\n
"""

# remove the leading and trailing whitespace from the template
trim = true

# changelog footer
footer = """
"""

postprocessors = [
  { pattern = "linrinf", replace = "linting" },
  { pattern = "storage.googleapis.com:433", replace = "`storage.googleapis.com:443`" },
  { pattern = "([^ ]+)\\(\\)", replace = "`$0`" },
  { pattern = "AUTHORS|CONTRIBUTING|README", replace = "$0.md" },
  { pattern = "([^ ]+)\\.md", replace = "`$0`" },
  { pattern = "([^ ]+)\\.ya?ml", replace = "`$0`" },
  { pattern = "\\.md\\.md", replace = ".md" },
  { pattern = "go\\.(mod|sum)", replace = "`$0`" },
  { pattern = "(?i)pkg\\.go\\.dev", replace = "`$0`" },
  { pattern = "corefunc_([^(\\.|\\s)]+)", replace = "`$0`" },
  { pattern = "Bump ([^ ]+)", replace = "Bump `$1`" },
  { pattern = "\\(#([0-9]+)\\)", replace = "([#${1}](@REPO/issues/${1}))" },
  { pattern = '@REPO', replace = "https://github.com/northwood-labs/terraform-provider-corefunc" },
] # postprocessors

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true

# filter out the commits that are not conventional
filter_unconventional = true

# process each line of a commit as an individual commit
split_commits = false

# regex for preprocessing the commit messages
commit_preprocessors = [
  # { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))"}, # replace issue numbers
]

# regex for parsing and grouping commits
commit_parsers = [
  { message = "^feat", group = "Features" },
  { message = "^fix", group = "Bug Fixes" },
  { message = "^docs", group = "Documentation" },
  { message = "^perf", group = "Performance" },
  { message = "^refactor", group = "Refactor" },
  { message = "^style", group = "Styling" },
  { message = "^build|deps", group = "Building and Dependencies" },
  { message = "^test", group = "Testing" },
  { message = "^lint", group = "Linting" },
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore\\(deps\\)", skip = true },
  { message = "^chore\\(pr\\)", skip = true },
  { message = "^chore\\(pull\\)", skip = true },
  { message = "^relprep", skip = true },
  { message = "^chore|ci", group = "Miscellaneous Tasks" },
  { body = ".*security", group = "Security" },
  { message = "^revert", group = "Revert" },
]

# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false

# filter out the commits that are not matched by commit parsers
filter_commits = false

# regex for matching git tags
tag_pattern = "v[0-9].*"

# regex for skipping tags
skip_tags = "v0.1.0-beta.1"

# regex for ignoring tags
ignore_tags = ""

# sort the tags topologically
topo_order = true

# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"

# limit the number of commits included in the changelog.
# limit_commits = 42
