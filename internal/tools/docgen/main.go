package main

import (
	"bytes"
	"flag"
	"fmt"
	"io"
	"log"
	"os"
	"path/filepath"
	"regexp"
	"sort"
	"strings"

	"github.com/spf13/cobra"

	"github.com/northwood-labs/terraform-provider-corefunc/cmd"
)

const markdownExtension = ".md"

type byName []*cobra.Command

func (s byName) Len() int           { return len(s) }
func (s byName) Swap(i, j int)      { s[i], s[j] = s[j], s[i] }
func (s byName) Less(i, j int) bool { return s[i].Name() < s[j].Name() }

// Test to see if we have a reason to print See Also information in docs
// Basically this is a test for a parent command or a subcommand which is
// both not deprecated and not the autogenerated help command.
func hasSeeAlso(c *cobra.Command) bool {
	if c.HasParent() {
		return true
	}

	for _, c := range c.Commands() {
		if !c.IsAvailableCommand() || c.IsAdditionalHelpTopicCommand() {
			continue
		}

		return true
	}

	return false
}

func printOptions(buf *bytes.Buffer, cmd *cobra.Command) error {
	flags := cmd.NonInheritedFlags()
	flags.SetOutput(buf)

	if flags.HasAvailableFlags() {
		buf.WriteString("### Options\n\n```text\n")
		flags.PrintDefaults()
		buf.WriteString("```\n\n")
	}

	parentFlags := cmd.InheritedFlags()
	parentFlags.SetOutput(buf)

	if parentFlags.HasAvailableFlags() {
		buf.WriteString("### Options inherited from parent commands\n\n```text\n")
		parentFlags.PrintDefaults()
		buf.WriteString("```\n\n")
	}

	return nil
}

// GenMarkdown creates markdown output.
func GenMarkdown(c *cobra.Command, w io.Writer) error {
	return GenMarkdownCustom(c, w, func(s string) string { return s })
}

// GenMarkdownCustom creates custom markdown output.
func GenMarkdownCustom(cmd *cobra.Command, w io.Writer, linkHandler func(string) string) error {
	cmd.InitDefaultHelpCmd()
	cmd.InitDefaultHelpFlag()

	buf := new(bytes.Buffer)
	name := cmd.CommandPath()

	buf.WriteString("## " + name + "\n\n")
	buf.WriteString(cmd.Short + "\n\n")

	if cmd.Long != "" {
		buf.WriteString("### Synopsis\n\n")

		long := cmd.Long

		long = strings.ReplaceAll(long, "[38;5;99m", "")
		long = strings.ReplaceAll(long, "[0m", "")
		long = strings.ReplaceAll(long, "â•­", "")
		long = strings.ReplaceAll(long, "â•®", "")
		long = strings.ReplaceAll(long, "â•°", "")
		long = strings.ReplaceAll(long, "â•¯", "")
		long = strings.ReplaceAll(long, "â”€", "")
		long = strings.ReplaceAll(long, "â”‚", "")
		long = strings.TrimSpace(long)
		long = regexp.MustCompile(`(?m)^\s+$\n`).ReplaceAllString(long, "\n")
		long = regexp.MustCompile(`(?m)^[\s\p{Zs}]+|[\s\p{Zs}]+$`).ReplaceAllString(long, "\n")
		long = strings.ReplaceAll(long, "\n\n\n", "\n")

		buf.WriteString(long + "\n\n")
	}

	if cmd.Runnable() {
		fmt.Fprintf(buf, "```bash\n%s\n```\n\n", cmd.UseLine())
	}

	if cmd.Example != "" {
		buf.WriteString("### Examples\n\n")
		fmt.Fprintf(buf, "```bash\n%s\n```\n\n", cmd.Example)
	}

	if err := printOptions(buf, cmd); err != nil {
		return err
	}

	if hasSeeAlso(cmd) {
		buf.WriteString("### See also\n\n")

		if cmd.HasParent() {
			parent := cmd.Parent()
			pname := parent.CommandPath()
			link := pname + markdownExtension

			link = strings.ReplaceAll(link, " ", "_")
			fmt.Fprintf(buf, "* [%s](%s) - %s\n", pname, linkHandler(link), parent.Short)
			cmd.VisitParents(func(c *cobra.Command) {
				if c.DisableAutoGenTag {
					cmd.DisableAutoGenTag = c.DisableAutoGenTag
				}
			})
		}

		children := cmd.Commands()
		sort.Sort(byName(children))

		for _, child := range children {
			if !child.IsAvailableCommand() || child.IsAdditionalHelpTopicCommand() {
				continue
			}

			cname := name + " " + child.Name()
			link := cname + markdownExtension

			link = strings.ReplaceAll(link, " ", "_")
			fmt.Fprintf(buf, "* [%s](%s) - %s\n", cname, linkHandler(link), child.Short)
		}

		// buf.WriteString("\n")
	}

	_, err := buf.WriteTo(w)

	return err
}

// GenMarkdownTree will generate a markdown page for this command and all
// descendants in the directory given. The header may be nil.
// This function may not work correctly if your command names have `-` in them.
// If you have `cmd` with two subcmds, `sub` and `sub-third`,
// and `sub` has a subcommand called `third`, it is undefined which
// help output will be in the file `cmd-sub-third.1`.
func GenMarkdownTree(c *cobra.Command, dir string) error {
	identity := func(s string) string { return s }
	emptyStr := func(s string) string { return "" }

	return GenMarkdownTreeCustom(c, dir, emptyStr, identity)
}

// GenMarkdownTreeCustom is the same as GenMarkdownTree, but
// with custom filePrepender and linkHandler.
func GenMarkdownTreeCustom(cm *cobra.Command, dir string, filePrepender, linkHandler func(string) string) error {
	for _, c := range cm.Commands() {
		if !c.IsAvailableCommand() || c.IsAdditionalHelpTopicCommand() {
			continue
		}

		if err := GenMarkdownTreeCustom(c, dir, filePrepender, linkHandler); err != nil {
			return err
		}
	}

	basename := strings.ReplaceAll(cm.CommandPath(), " ", "_") + markdownExtension
	filename := filepath.Join(dir, basename)

	f, err := os.Create(filename)
	if err != nil {
		return err
	}
	defer f.Close()

	if _, err := f.WriteString(filePrepender(filename)); err != nil {
		return err
	}

	if err := GenMarkdownCustom(cm, f, linkHandler); err != nil {
		return err
	}

	return nil
}

func main() {
	out := flag.String("out", "./docs/cli", "output directory")
	flag.Parse()

	if err := os.MkdirAll(*out, 0o755); err != nil {
		log.Fatal(err)
	}

	root := cmd.Root()

	prep := func(filename string) string {
		base := filepath.Base(filename)
		name := strings.TrimSuffix(base, filepath.Ext(base))
		title := strings.ReplaceAll(name, "_", " ")

		return fmt.Sprintf(
			"---\ntitle: %q\nslug: %q\ndescription: \"CLI reference for %s\"\n---\n\n",
			title,
			name,
			title,
		)
	}

	link := strings.ToLower

	if err := GenMarkdownTreeCustom(root, *out, prep, link); err != nil {
		log.Fatal(err)
	}
}
